<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[几谷 博客]]></title>
  <link href="http://blog.kayorl.com/atom.xml" rel="self"/>
  <link href="http://blog.kayorl.com/"/>
  <updated>2017-03-08T13:02:40+08:00</updated>
  <id>http://blog.kayorl.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[数据类型]]></title>
    <link href="http://blog.kayorl.com/datatype.html"/>
    <updated>2017-02-16T20:05:35+08:00</updated>
    <id>http://blog.kayorl.com/datatype.html</id>
    <content type="html"><![CDATA[
<p>学会数据类型，防止自己挖坑自己跳 (￣o￣) . z Z</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">Undefined类型，只有一个值 undefined</h2>

<ol>
<li>声明，但不赋值变量，默认值为 undefined</li>
<li>不声明，直接操作变量， <u>不会有默认值</u></li>
<li>奇怪的是 typeof 操作符都返回 undefined</li>
</ol>

<pre><code>var msg;
alert (msg == undefiend);   // true
alert (age == undefined);   // ERROR!

alert (typeof undefined);   // undefined
alert (typeof undefined);   // undefined
</code></pre>

<h2 id="toc_1">Null类型, 只有一个值 null</h2>

<ol>
<li>null 表示一个空对象指针 </li>
<li>用 typeof 检测时会返回 <u>object</u>.</li>
<li>如果变量以后要保存对象，那么初始化为 null 会更好</li>
</ol>

<pre><code>alert (typeof null);    // object

if ( car ! = null ) {
    //对 car 对象进行操作
}
</code></pre>

<h2 id="toc_2">Number</h2>

<ol>
<li>浮点运算会产生误差，不要测定特定的浮点数值</li>
<li>无穷值用 <code>isFinite()</code> 检查</li>
<li>范围数值的操作数未返回数值，用 NaN 表示，用 <code>isNaN()</code> 检查</li>
</ol>

<table>
<thead>
<tr>
<th style="text-align: center"></th>
<th style="text-align: center">“hello&quot;</th>
<th style="text-align: center">undefined</th>
<th style="text-align: center">null</th>
<th style="text-align: center">“”</th>
<th style="text-align: center">true</th>
<th style="text-align: center">“000011&quot;</th>
<th style="text-align: center">22.5</th>
<th style="text-align: center">22.5.5</th>
<th style="text-align: center">1234hdhd</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">Number()</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">0</td>
<td style="text-align: center">0</td>
<td style="text-align: center">1</td>
<td style="text-align: center">11</td>
<td style="text-align: center">22.5</td>
<td style="text-align: center">ERROR</td>
<td style="text-align: center">ERROR</td>
</tr>
<tr>
<td style="text-align: center">parseInt(obj,base)</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">11</td>
<td style="text-align: center">22</td>
<td style="text-align: center">22</td>
<td style="text-align: center">1234</td>
</tr>
<tr>
<td style="text-align: center">parseFloat()</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">11</td>
<td style="text-align: center">22.5</td>
<td style="text-align: center">22.5</td>
<td style="text-align: center">1234</td>
</tr>
</tbody>
</table>

<h2 id="toc_3">String 类型，值不变</h2>

<ol>
<li>确定值不为 null 或 undefined 时直接用 <code>toString()</code> 方法</li>
<li>null 与 undefined 无 <code>toString()</code> 方法</li>
<li>调用 <code>String()</code> 方法,可以将任意值转换为字符串 (个人觉得为了安全还是不要的好)</li>
<li>
```js</li>
</ol>

<p>function String(obj){<br/>
    if(typeof obj.toString() === &quot;function&quot;) {<br/>
        return obj.toString();      // 方法<br/>
    }<br/>
    if(obj === null) {<br/>
        return &quot;null&quot;;<br/>
    }<br/>
    if(typeof obj === undefined) {<br/>
        return &quot;undefined&quot;;<br/>
    }<br/>
}<br/>
```</p>

<h2 id="toc_4">Object 类型</h2>

<table>
<thead>
<tr>
<th style="text-align: left">方法</th>
<th style="text-align: left">描述</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">constructor</td>
<td style="text-align: left">构造函数</td>
</tr>
<tr>
<td style="text-align: left">hasOwnProperty(propertyName)</td>
<td style="text-align: left">检查属性是否存在当前对象实例中</td>
</tr>
<tr>
<td style="text-align: left">isPrototypeOf(object)</td>
<td style="text-align: left">检查传入对象是否为当前对象的原型</td>
</tr>
<tr>
<td style="text-align: left">toLocalString()</td>
<td style="text-align: left">返还执行环境地区的字符串</td>
</tr>
<tr>
<td style="text-align: left">toString()</td>
<td style="text-align: left">返回字符串表示</td>
</tr>
<tr>
<td style="text-align: left">valueOf()</td>
<td style="text-align: left">返回字符串、数值或布尔值表示</td>
</tr>
</tbody>
</table>

<blockquote>
<p>内置函数和操作符的操作流程</p>
</blockquote>

<pre><code class="language-js">if( !obj.valueOf().func() ){
    return ...;
}else{
    if( ! obj.toString().func() ) {
        return ...;
    }else {
        return ...;
    }
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html 的解析顺序，及 script 标签的位置选择]]></title>
    <link href="http://blog.kayorl.com/script_position.html"/>
    <updated>2017-02-16T20:05:35+08:00</updated>
    <id>http://blog.kayorl.com/script_position.html</id>
    <content type="html"><![CDATA[
<p>读 《JavaScript高级程序设计》时，对 html 的标签解析感到模糊，参考了博文，根据理解画了以下的解析流程图，有误请指教哈~</p>

<span id="more"></span><!-- more -->

<p><img src="http://olh3adg9x.bkt.clouddn.com/decode_html.png" alt="decode_htm"/></p>

<p>浏览器对非延迟执行的脚本都是立即执行的，导致浏览器呈现内容的速度变慢（即页面空白的时间过久），造成不好的用户体验。</p>

<blockquote>
<p>因此把所有脚本放到<body>元素的最后面</p>
</blockquote>

<p>有人说，全用 defer 脚本不就好了吗？ <br/>
<strong><em>人无完人，defer 也有限制</em></strong></p>

<blockquote>
<p>延迟脚本直到 </html>解析完后加载;<br/>
只有 ___一个__ defer 能按顺序执行;<br/>
<strong>只适用于外部脚本文件</strong></p>
</blockquote>

<p>async 异步呢？其存在的目的是 <br/>
<strong><em>不让页面等待两个脚本下载和执行</em></strong></p>

<blockquote>
<p>不保证先后顺序<br/>
只适用于外部脚本文件</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 DOCTYPE 声明的意义]]></title>
    <link href="http://blog.kayorl.com/doctype.html"/>
    <updated>2017-03-08T10:01:30+08:00</updated>
    <id>http://blog.kayorl.com/doctype.html</id>
    <content type="html"><![CDATA[
<p>每次看到 html 文档时，已经习惯了头部有个 <code>&lt;!DOCTYPE html&gt;</code>，印象也有些模糊，趁着学习 css ，赶紧整理一下</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">DOCTYPE 声明对页面进行有效性验证</h2>

<blockquote>
<p>DTD (文档定义类型)定义 XML 或 HTML 的特定版本允许有什么，不允许有什么。</p>

<p>SGML (标准通用标记语言) 是一种定义电子文档结构和描述其内容的国际标准语言</p>
</blockquote>

<p>有助于找到代码中的 bug</p>

<h2 id="toc_1">DOCTYPE 声明让浏览器有不同的呈现形式</h2>

<blockquote>
<p>标准模式(standard mode)：根据规范的一种呈现形式<br/>
混杂模式(quirk mode)：模拟老式浏览器的一种呈现形式</p>
</blockquote>

<table>
<thead>
<tr>
<th style="text-align: center"></th>
<th style="text-align: center">DTD</th>
<th style="text-align: center">standard</th>
<th style="text-align: center">quirk</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center"> HTML4.01</td>
<td style="text-align: center">strict</td>
<td style="text-align: center">yes</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Transitional &amp;&amp; url</td>
<td style="text-align: center">yes</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Transitional &amp;&amp; NO url</td>
<td style="text-align: center"></td>
<td style="text-align: center">yes</td>
</tr>
<tr>
<td style="text-align: center">HTML5</td>
<td style="text-align: center"> 不基于 SGML，所以不需要引用 DTD</td>
<td style="text-align: center">yes</td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 语句]]></title>
    <link href="http://blog.kayorl.com/14872445826285.html"/>
    <updated>2017-02-16T19:29:42+08:00</updated>
    <id>http://blog.kayorl.com/14872445826285.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">存储创建时间和最后修改时间</h2>

<pre><code class="language-sql">CREATE TABLE t1
(
    tb_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ts_modifiled TIMESTAMP DEFAULT CURRNET_TIMESTAMP
                            ON UPDATE CURRENT_TIMESTAMP,
    ...
):
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL5.7 从相见到👋]]></title>
    <link href="http://blog.kayorl.com/14872339187000.html"/>
    <updated>2017-02-16T16:31:58+08:00</updated>
    <id>http://blog.kayorl.com/14872339187000.html</id>
    <content type="html"><![CDATA[
<p>我的意中人是个盖世英雄<br/>
有一天他会踩着七色云彩来娶我<br/>
我猜中了前头,<br/>
可是我猜不着这结局</p>

<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">安装</a>
</li>
<li>
<a href="#toc_1">建立与 MySQL 服务器的连接</a>
</li>
<li>
<a href="#toc_2">导入 .sql 文件</a>
</li>
<li>
<a href="#toc_3">修改时区</a>
</li>
<li>
<a href="#toc_4">备份</a>
</li>
<li>
<a href="#toc_5">卸载</a>
</li>
</ul>


<h2 id="toc_0">安装</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04">DO教程</a></p>

<pre><code># 安装 
$ sudo apt-get update
$ sudo apt-get install mysql-server

# 修改数据库的安全配置，如禁用远程 root 用户
$ sudo mysql_secure_installation

## 测试数据库状态
$ systemctl status mysql.service
</code></pre>

<h2 id="toc_1">建立与 MySQL 服务器的连接</h2>

<p>为连接到 MySQL 服务器,在命令行中调用 mysql 程序</p>

<pre><code>$ mysql -h host_name -p -u user_name -D database_name
</code></pre>

<ul>
<li><code>mysql</code> 是必须的, 其他可选</li>
<li>-h  host_name　　　主机地址,默认为本地</li>
<li>-u  user_name　　　MySQL 用户名</li>
<li>-p　　　　　　　　回显 Enter password: ，如果相应用户名有密码而没加此项，会显示<code>拒绝访问</code></li>
<li>-D  database_name 选择操作(默认)的数据库<br/></li>
</ul>

<h2 id="toc_2">导入 .sql 文件</h2>

<p>可以将编写好的数据库语句写入到文件名后缀为 <code>.sql</code> 的文件中,并记住其路径,最简单的方法是在命令行中进入到.sql 文件所在的目录,然后在<code>命令行</code>执行以下命令(省略了主机名,用户,密码等参数)</p>

<pre><code>$ mysql sampdb &lt; create_member.sql
</code></pre>

<p>如果已经进入 mysql 程序界面,则执行</p>

<pre><code>mysql&gt; source create_member.sql;
</code></pre>

<h2 id="toc_3">修改时区</h2>

<pre><code># /etc/my.cnf

[mysqld]
...
default-time-zone = &#39;+8:00&#39;

$ systemctl restart mysql
</code></pre>

<h2 id="toc_4">备份</h2>

<pre><code>$ mysqldump -u -p -D exampleDB &gt;my.sql
</code></pre>

<h2 id="toc_5">卸载</h2>

<p>purge,翻译过来是净化的意思</p>

<pre><code>sudo apt-get remove --purge mysql*
sudo apt-get autoremove
sudo apt-get autoclean
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(6) sequelize-cli，出门必备良品]]></title>
    <link href="http://blog.kayorl.com/14872470138156.html"/>
    <updated>2017-02-16T20:10:13+08:00</updated>
    <id>http://blog.kayorl.com/14872470138156.html</id>
    <content type="html"><![CDATA[
<p>让数据库转移到那些年的状态<br/>
通过<strong>迁移文件</strong>存储数据库不同时期的状态，每个迁移文件描述了对数据库的操作</p>

<span id="more"></span><!-- more -->

<p><strong>CLI</strong>:  <code>command-line interface</code> , 命令行界面</p>

<h2 id="toc_0">全局安装</h2>

<pre><code>$ npm install -g sequelize-cli
</code></pre>

<h3 id="toc_1">使用</h3>

<pre><code>$ sequelize
</code></pre>

<p>迁移文件一般长这样</p>

<blockquote>
<p>queryInterface : 修改数据库</p>

<p>Sequelize : 提供多种类型</p>
</blockquote>

<pre><code class="language-js">module.exports = {
  up: function(queryInterface, Sequelize) {
    // logic for transforming into the new state
  },
 
  down: function(queryInterface, Sequelize) {
    // logic for reverting the changes
  }
}
</code></pre>

<p>queryInterface有一下几个函数（常用）：</p>

<ul>
<li>createTable(tableName, attributes, options)</li>
<li>addIndex(tableName, attributes, options)</li>
<li>dropTable(tableName, options)</li>
</ul>

<h2 id="toc_2">createTable(tableName, attributes, options)</h2>

<pre><code>queryInterface.createTable(
  &#39;nameOfTheNewTable&#39;,
  {
    id: {
      type: Sequelize.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    createdAt: {
      type: Sequelize.DATE
    },
    updatedAt: {
      type: Sequelize.DATE
    },
    attr1: Sequelize.STRING,
    attr2: Sequelize.INTEGER,
    attr3: {
      type: Sequelize.BOOLEAN,
      defaultValue: false,
      allowNull: false
    },
    //foreign key usage
    attr4: {
        type: Sequelize.INTEGER,
        references: {
            model: &#39;another_table_name&#39;,
            key: &#39;id&#39;
        },
        onUpdate: &#39;cascade&#39;,
        onDelete: &#39;cascade&#39;
    }
  },
  {
    engine: &#39;MYISAM&#39;,                     // default: &#39;InnoDB&#39;
    charset: &#39;utf8&#39;,                    // default: null
    schema: &#39;public&#39;                      // default: public, PostgreSQL only.
  }
)
</code></pre>

<h2 id="toc_3">addIndex(tableName, attributes, options)</h2>

<pre><code class="language-js">// This example will create the index person_firstname_lastname
queryInterface.addIndex(&#39;Person&#39;, [&#39;firstname&#39;, &#39;lastname&#39;])



// This example will create a unique index with the name SuperDuperIndex using the optional &#39;options&#39; field.
// Possible options:
// - indicesType: UNIQUE|FULLTEXT|SPATIAL
// - indexName: The name of the index. Default is __
// - parser: For FULLTEXT columns set your parser
// - indexType: Set a type for the index, e.g. BTREE. See the documentation of the used dialect
// - logging: A function that receives the sql query, e.g. console.log
queryInterface.addIndex(
  &#39;Person&#39;,
  [&#39;firstname&#39;, &#39;lastname&#39;],
  {
    indexName: &#39;SuperDuperIndex&#39;,
    indicesType: &#39;UNIQUE&#39;
  }
)
</code></pre>

<h2 id="toc_4">dropTable(tableName, options)</h2>

<pre><code>queryInterface.dropTable(&#39;nameOfTheExistingTable&#39;)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(5) 几对几]]></title>
    <link href="http://blog.kayorl.com/14872314142796.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142796.html</id>
    <content type="html"><![CDATA[
<p>一对一，一对多，多对多</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">一对一</h2>

<h3 id="toc_1">hasOne</h3>

<h3 id="toc_2">belongsTo</h3>

<blockquote>
<p>区别: <code>联系键</code> 添加的地方不一样</p>
</blockquote>

<pre><code class="language-js">var Player = this.sequelize.define(&#39;player&#39;, {/* attributes */}), 
    Coach  = this.sequelize.define(&#39;coach&#39;, {/* attributes */}), 
    Team  = this.sequelize.define(&#39;team&#39;, {/* attributes */}),
    Game =  this.sequelize.define(&#39;game&#39;, {/* attributes */});


Player.belongsTo(Team);     // 添加 teamId 到 Player
Coach.hasOne(Team);         //添加 coachId 到 Team
</code></pre>

<p>通过 hasOne 方法添加的模型</p>

<blockquote>
<p>对新添加模型的 setter 和 getter 会自动以模型名为后缀</p>

<p>此外，也会以  <code>模型名+id</code> 的形式生成外码</p>
</blockquote>

<p>可以通过以下代码修改</p>

<pre><code class="language-js">// Person#getPerson, Person#setPerson

Person.hasOne(Person);


// 增加方法Person#getFather,Person#setFather
// 修改外码为dadId

Person.hasOne(Person, {as: &#39;Father&#39;, foreignKey: &#39;dad_id&#39;})
</code></pre>

<h2 id="toc_3">一对多</h2>

<pre><code class="language-js">var User = sequelize.define(&#39;user&#39;, {/* ... */})
var Project = sequelize.define(&#39;project&#39;, {/* ... */})
 
// Project#getWorkers , Project#setWorkers

Project.hasMany(User, {as: &#39;Workers&#39;})
</code></pre>

<h2 id="toc_4">多对多</h2>

<blockquote>
<p>使用belongToMany,为两个多对多的模型建立联系</p>

<p>通过创建一个中间模型<code>(联系集)</code>实现</p>
</blockquote>

<pre><code class="language-js">User = sequelize.define(&#39;user&#39;, {})
Project = sequelize.define(&#39;project&#39;, {})
UserProjects = sequelize.define(&#39;userProjects&#39;, {
    id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    status: DataTypes.STRING
})
 
User.belongsToMany(Project, {  as: &#39;Tasks&#39;, through: UserProjects, foreignKey: &#39;userId&#39; })
Project.belongsToMany(User, {  as: &#39;Workers&#39;,through: UserProjects ,foreignKey: &#39;projectId&#39;})


// 添加一个 project, 并且,设置其状态为 started

user.addProject(project, { status: &#39;started&#39; })


// 使用 through 可以选择特定属性

User.findAll({
  include: [{
    model: Project,
    through: {
      attributes: [&#39;createdAt&#39;, &#39;startedAt&#39;, &#39;finishedAt&#39;],
      where: {completed: true}
    }
  }]
});
</code></pre>

<blockquote>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(4) 范围]]></title>
    <link href="http://blog.kayorl.com/14872314142644.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142644.html</id>
    <content type="html"><![CDATA[
<p>范围（<code>scope</code>）: 定义好范围,在后续的操作中可以减少选择条件的重复，比如，只在<strong>未删除用户</strong>列表中进行操作。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">范围是对模型的一种分类</h2>

<pre><code class="language-js">// 修改默认所有操作的范围 default Scope
var Project = sequelize.define( &#39;project&#39;, {
    // Attributes
}, {
    defaultScope: {
        where: {
            active: true
        }
    },
    scopes: {
        deleted: {
            where: {
                deleted: true
            }
        },
        activeUsers: {
            include: [
                { model: User, where: { active: true } }
      ]
        }
    }
} );



// 移除默认范围，设置为 deleted 范围
Project.scope( &#39;deleted&#39; ).findAll();

// 与上面等价
var DeletedProjects = Project.scope( &#39;deleted&#39; );
DeletedProjects.findAll();

var Post = sequelize.define( &#39;post&#39;, attributes, {
    defaultScope: {
        where: {
            active: true
        }
    },
    scopes: {
        deleted: {
            where: {
                deleted: true
            }
        }
    }
} );
</code></pre>

<h2 id="toc_1">例子</h2>

<pre><code class="language-js">User.hasMany( Post ); // regular getPosts association
User.hasMany( Post.scope( &#39;deleted&#39; ), { as: &#39;deletedPosts&#39; } );
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(3)  CRUD]]></title>
    <link href="http://blog.kayorl.com/14872314142502.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142502.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">模型定义</h2>

<pre><code class="language-js">var Task = sequelize.define( &#39;task&#39;, {
    title: Sequelize.STRING,
    rank: { type: Sequelize.STRING, defaultValue: 3 }
} );
</code></pre>

<h2 id="toc_1">Create</h2>

<pre><code class="language-js">// 创建数据库中对象
Task.create( { title: &#39;foo&#39; } );

// 创建临时变量
var task = Task.build( { title: &#39;very important task&#39; } );

// 将临时变量存入数据库内, 只保存 title 属性
task.save( { fields: [ &#39;title&#39; ] } );
</code></pre>

<h2 id="toc_2">Update</h2>

<pre><code class="language-js">// 在数据库中更新 task 的 title
task.update( { title: &#39;a very different title now&#39; } );


// 更新 排名小于1000或者无排名的 post 的 updateAt 为 null
Post.update( {
    updatedAt: null,
}, {
    where: {
        rank: {
            $or: {
                $lt: 100,
                $eq: null
            }
        }
    }
    //// rank &lt; 1000 OR rank IS NULL
} );
</code></pre>

<h2 id="toc_3">Delete</h2>

<pre><code class="language-js">// 删除 不活跃的 post
Post.destroy( {
    where: {
        status: &#39;inactive&#39;
    }
} );
</code></pre>

<h2 id="toc_4">Retrieve</h2>

<pre><code class="language-js">// 只选择相应属性
Model.findAll( {
    attributes: [ &#39;foo&#39;, &#39;bar&#39; ]
} );
// 做聚类
Model.findAll( {
    attributes: { include: [ [ sequelize.fn( &#39;COUNT&#39;, sequelize.col( &#39;hats&#39; ) ), &#39;no_hats&#39; ] ] }
} );
// 除开某些属性
Model.findAll( {
    attributes: { exclude: [ &#39;baz&#39; ] }
} );

// id 查找
Project.findById( 123 ).then();

// 属性查找
Project.findOne( { where: { title: &#39;aProject&#39; } } ).then();
// ？
Project.findOne( { where: { title: &#39;aProject&#39; }, attributes: [ &#39;id&#39;, [ &#39;name&#39;, &#39;title&#39; ] ] } ).then();

// 找，无则创建， created 为 boolean
User.findOrCreate( { where: { username: &#39;kayor&#39; } } ).spread( function ( user, created ) {} );

// 找并且计数 count 为计数， rows 为对象数组
Project.findAndCountAll( {
    where: { title: { $like: &#39;foo%&#39; } },
    offset: 10,
    limit: 2
} ).then( function ( result ) {
    console.log( result.count );
    console.log( result.rows );
} );

// 找出拥有 active profile 的用户
User.findAndCountAll( {
    include: [
        { model: Profile, where: { active: true } }
  ],
    limit: 3
} );


Project.findAll();
Project.all();
Project.findAll( { where: { name: &quot;a Project&quot; } } );
Project.findAll( { where: [ &quot;id&gt;?&quot;, 25 ] } );
Project.findAll( { where: { id: [ 1, 2, 3 ] } } );
Project.findAll( {
    where: {
        id: {
            $and: { a: 5 },
            $or: [ { a: 5 }, { a: 6 } ],
            $gt: 6,
            $gte: 6,
            $lt: 10,
            $lte: 10,
            $ne: 20,
            $between: [ 6, 10 ],
            $notBetween: [ 6, 10 ],
            $in: [ 1, 2 ],
            $notIn: [ 1, 2 ],
            $like: &#39;%hat&#39;
        },
        status: { $not: false }
    }
} );

//只找十个
Project.findAll( { limit: 10 } );
// 跳过前10个
Project.findAll( { offset: 10 } );
// 跳过前10，取两个
Project.findAll( { offset: 10, limit: 2 } );

// 递减
Project.findAll( { order: &#39;title DESC&#39; } );
// 分组
Project.findAll( { group: &#39;name&#39; } );
// 计数
Project.count( { where: [ &quot;id&gt;?&quot;, 25 ] } );
// 找最大
Project.max( &#39;age&#39; );

// 内连接找到拥有符合条件工具的用户
Post.findAll( {
    include: [ {
        model: Comment,
        as: &#39;comment_my&#39;,
        where: { name: { $like: &#39;%ooth%&#39; } }
    } ]
} );

// 获得原数据
Post.findOne( { where: { title: &#39;scut&#39; } } ).then( function ( post ) {
    post.title = &#39;south china university of tecknology&#39;;
    console.log( post.title ); // &#39;south china university of tecknology&#39;

    post.reload().then( function () {
        console.log( post.title ); // &#39;scut&#39;
    } );
} );

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[supertest 模拟客户端]]></title>
    <link href="http://blog.kayorl.com/14872476184764.html"/>
    <updated>2017-02-16T20:20:18+08:00</updated>
    <id>http://blog.kayorl.com/14872476184764.html</id>
    <content type="html"><![CDATA[
<p>模拟一个客户端，可用于爬虫、API 测试等</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">安装</h2>

<pre><code>$ npm install supertest --save-dev
</code></pre>

<h2 id="toc_1">例子</h2>

<pre><code class="language-js">var request = require(&#39;supertest&#39;);
var express = require(&#39;express&#39;);

var app = express();

app.get(&#39;/user&#39;, function(req, res) {
  res.status(200).json({ name: &#39;tobi&#39; });
});

request(app)
  .get(&#39;/user&#39;)
  .expect(&#39;Content-Type&#39;, /json/)
  .expect(&#39;Content-Length&#39;, &#39;15&#39;)
  .expect(200)
  .end(function(err, res) {
    if (err) throw err;
  });
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pm2]]></title>
    <link href="http://blog.kayorl.com/14872295003201.html"/>
    <updated>2017-02-16T15:18:20+08:00</updated>
    <id>http://blog.kayorl.com/14872295003201.html</id>
    <content type="html"><![CDATA[
<p>nodejs 的进程管理器，自带<code>负载均衡</code>以及热重载</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">全局安装</h2>

<pre><code>$ npm install pm2 -g
</code></pre>

<h2 id="toc_1">开机启动</h2>

<p>pm2 save 保存当前进程列表，下次启动时自动恢复列表内进程</p>

<pre><code>$ pm2 startup &amp;&amp; pm2 save
</code></pre>

<h2 id="toc_2">启动</h2>

<blockquote>
<p>[ app_name ] : 应用名<br/>
[ 4 ] :进程数目,为0时进程数目与 CPU 数相等</p>
</blockquote>

<pre><code>$ pm2 start app.js --name=[app_name] -i 4
</code></pre>

<h2 id="toc_3">暂停 | 删除</h2>

<blockquote>
<p>[ id ] : 进程 id</p>
</blockquote>

<pre><code>$ pm2 stop [id]
$ pm2 delete [id]
</code></pre>

<p>进程数变为2</p>

<blockquote>
<p>[ app_name ] : 应用名</p>
</blockquote>

<pre><code>$ pm2 sacle [app_name] 2
</code></pre>

<h2 id="toc_4">监控</h2>

<pre><code>$ pm2 list
$ pm2 monit
$ pm2 show [app_name]
$ pm2 logs
$ pm2 logs [app_name]
</code></pre>

<hr/>

<p>此外，还可以通过 <a href="https://app.keymetrics.io">keymetrics</a>  实现网页监控，不过免费版只能支持一台机器的状态监控</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx 从安装到卸载]]></title>
    <link href="http://blog.kayorl.com/14872295003080.html"/>
    <updated>2017-02-16T15:18:20+08:00</updated>
    <id>http://blog.kayorl.com/14872295003080.html</id>
    <content type="html"><![CDATA[
<p>在<code>ubuntu16.04</code>下，对 nginx 进行</p>

<ul>
<li>
<a href="#toc_0">源安装</a>
</li>
<li>
<a href="#toc_1">配置防火墙允许 nginx 通过 80 端口</a>
</li>
<li>
<a href="#toc_2">查看 nginx 状态</a>
</li>
<li>
<a href="#toc_3">内核参数优化</a>
</li>
<li>
<a href="#toc_4">使配置生效</a>
</li>
<li>
<a href="#toc_5">nginx 配置</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<p>参考很全面的<a href="http://bbs.linuxtone.org/thread-25588-1-1.html">教程</a>，关于 nginx 的优化，以及自己平常遇到的问题</p>

<p>[tutorial]:</p>

<h2 id="toc_0">源安装</h2>

<pre><code>sudo apt-get update
sudo apt-get install nginx 

# 安装常用 nginx 插件
apt-get install nginx-extras 
</code></pre>

<h2 id="toc_1">配置防火墙允许 nginx 通过 80 端口</h2>

<pre><code>sudo ufw app list 
sudo ufw allow &#39;Nginx HTTP&#39; 
sudo ufw status
</code></pre>

<h2 id="toc_2">查看 nginx 状态</h2>

<pre><code>systemctl status nginx
</code></pre>

<h2 id="toc_3">内核参数优化</h2>

<pre><code>#vi /etc/sysctl.conf
net.ipv4.netfilter.ip_conntrack_tcp_timeout_established = 1800
net.ipv4.ip_conntrack_max = 16777216　＃　如果使用默认参数,容易出现网络丢包
net.ipv4.netfilter.ip_conntrack_max = 16777216＃　如果使用默认参数,容易出现网络丢包
net.ipv4.tcp_max_syn_backlog = 65536
net.core.netdev_max_backlog =  32768
net.core.somaxconn = 32768
net.core.wmem_default = 8388608
net.core.rmem_default = 8388608
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries =
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_mem = 94500000 915000000 927000000
net.ipv4.tcp_max_orphans = 3276800
net.ipv4.ip_local_port_range = 1024  65535
</code></pre>

<h2 id="toc_4">使配置生效</h2>

<pre><code># sysctl -p
</code></pre>

<h2 id="toc_5">nginx 配置</h2>

<pre><code># vi /etc/nginx/nginx.conf

worker_processes auto;  #开启工作进程，多少核心就多少个
pid /run/nginx.pid;     #pid 路径
worker_rlimit_nofile 100000; #最大打开文件数限制，解决&#39;too many open files&#39;问题

events {
        worker_connections 2048;   #一个进程能同时处理2048个请求
        multi_accept on;    #接收到一个新连接后尽可能多链接
        # use epoll;    #*BSD 用 kqueue，其他用 epoll，不描述的话，自动选择适合操作系统地
}

http {

        ##
        # Basic Settings
        ##

        server_tokens off;      #不向用户展示 Nginx 版本，保证安全

        sendfile on;            #静态服务器启用，
        tcp_nopush on;          #在一个数据包里发送所有头文件，不一个一个发送
        tcp_nodelay on;         #不缓存，直接发送


        ##
        #Timeout Settings
        ##
        keepalive_timeout 10;   #服务器在超时时间过后关闭链接
        client_header_timeout 10;
        client_body_timeout 10;
        reset_timedout_connection on; #关闭不响应的客户端连接
        send_timeout 10;        #客户端的响应超时时

        types_hash_max_size 2048;

        ##
        #1 user connection limit
        ##
        limit_conn_zone $binary_remote_addr zone=addr:5m;       #保存当前连接数的共享内存
        limit_conn addr 100;    #同一个 ip 最多100个连接

        # server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        #Log Settings
        access_log off;
        error_log /var/log/nginx/error.log;


        ##
        # SSL Settings
        ##

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
        ssl_prefer_server_ciphers on;


        ##
        # Gzip Settings
        ##

        gzip on;
        gzip_disable &quot;msie6&quot;;   #对 IE6 及以下的版本禁用 gzip
         # gzip_static on;
        # gzip_vary on;
          gzip_proxied any; #压缩所有请求
          gzip_min_length 1000; #启用压缩的最少字节数，小于1000不压缩
          gzip_comp_level 4;    #压缩比，9最慢但压缩最强
        # gzip_buffers 16 8k;
        # gzip_http_version 1.1;
          gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        ##
        #Open File Cache Settings
        ##

        open_file_cache max=100000 inactive=20s;    #打开缓存的同时，当20秒不活动时清除掉
        open_file_cache_valid 30s;
        open_file_cache_min_uses 2;
        open_file_cache_errors on;


        #Virtual Host Configs
        include /etc/nginx/conf.d/*.conf;
}
</code></pre>

<blockquote>
<p>卸载 nginx</p>
</blockquote>

<pre><code>sudo apt-get remove nginx nginx-common # Removes all but config files.
sudo apt-get purge nginx nginx-common # Removes everything.
sudo apt-get autoremove # After using any of the above commands, use this in order to remove dependencies used by nginx which are no longer required.
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[杂]]></title>
    <link href="http://blog.kayorl.com/14872477973050.html"/>
    <updated>2017-02-16T20:23:17+08:00</updated>
    <id>http://blog.kayorl.com/14872477973050.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">Nodejs <a href="node-production">生产模式</a></h2>

<h2 id="toc_1">配置 openssl 密码开关</h2>

<pre><code>$ vi /etc/ssh/sshd_config
$ sudo systemctl reload sshd
</code></pre>

<h2 id="toc_2">Redis</h2>

<p><a href="http://www.linuxdiyf.com/linux/22527.html">http://www.linuxdiyf.com/linux/22527.html</a></p>

<h2 id="toc_3">Mac 启动 redis</h2>

<pre><code>$ sudo ../bin/redis-server ./redis.conf
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(2)  定义表格]]></title>
    <link href="http://blog.kayorl.com/14872314142360.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142360.html</id>
    <content type="html"><![CDATA[
<p>Sequelize 会自动增加 <code>createdAt</code> 和 <code>updated</code> 属性,这样能知道一个实例的创建时间和最终修改时间.</p>

<p>如果不想自动生成,可以到<a href="http://docs.sequelizejs.com/en/v3/docs/models-definition/#configuration">configuration</a>去看如何实现.</p>

<span id="more"></span><!-- more -->

<blockquote>
<p>定义模型与表之间的映射,使用 define 方法. </p>
</blockquote>

<pre><code class="language-js">var Project = sequelize.define(&#39;project&#39;, {
  title: Sequelize.STRING,
  description: Sequelize.TEXT
})

var Task = sequelize.define(&#39;task&#39;, {
  title: Sequelize.STRING,
  description: Sequelize.TEXT,
  deadline: Sequelize.DATE
})
</code></pre>

<p>还可以为每一个列增加一些可选属性</p>

<pre><code class="language-js">var Foo = sequelize.define(&#39;foo&#39;, {
 // 自动设置默认值为 true
 flag: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true},

 //  日期默认值 =&gt; 当前时间
 myDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },

 // 设置列的 allowNull为 false 将会为该列增加 非空 属性
 // 在查询数据库之前想检车一个值是否为 空 ,看 validation 节
 title: { type: Sequelize.STRING, allowNull: false},
 
 // 创建两个拥有相同属性的值会抛出一个错误
 // The unique property can be either a boolean, or a string.
 // If you provide the same string for multiple columns, they will form a
 // composite unique key.
 someUnique: {type: Sequelize.STRING, unique: true},
 uniqueOne: { type: Sequelize.STRING,  unique: &#39;compositeIndex&#39;},
 uniqueTwo: { type: Sequelize.INTEGER, unique: &#39;compositeIndex&#39;}
 
 // unique 属性同时也是创建一个 unique 索引 的简写
 someUnique: {type: Sequelize.STRING, unique: true}
 
 // 跟下面的两句定义语句等价
 {someUnique: {type: Sequelize.STRING}},
 {indexes: [{unique: true, fields: [&#39;someUnique&#39;]}]}

 // 主码
 identifier: { type: Sequelize.STRING, primaryKey: true},
 
 // 自增
 incrementMe: { type: Sequelize.INTEGER, autoIncrement: true },

 // 注释,只有 MySQL 和 PG 可以使用
 // Comments can be specified for each field for MySQL and PG
 hasComment: { type: Sequelize.INTEGER, comment: &quot;I&#39;m a comment!&quot; },
 
 // 在模型中的名字是小驼峰,在表中的列名可以用 field 属性来指定
 fieldWithUnderscores: { type: Sequelize.STRING, field: &quot;field_with_underscores&quot; },

 // 创建外码
 bar_id: {
   type: Sequelize.INTEGER,

   references: {
     // This is a reference to another model
     model: Bar,
     //被引用模型的  列名  (是列名,即 field 名)
     key: &#39;id&#39;,
     // 检查外码约束,只支持 PostgreSQL .
     deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE
   }
 }
})
</code></pre>

<h2 id="toc_0">数据类型</h2>

<p>更详细的可以上 <a href="http://docs.sequelizejs.com/en/v3/api/datatypes">DataTypes</a> 看一看</p>

<pre><code class="language-js">Sequelize.STRING                      // VARCHAR(255)
Sequelize.STRING(1234)                // VARCHAR(1234)
Sequelize.STRING.BINARY               // VARCHAR BINARY
Sequelize.TEXT                        // TEXT
Sequelize.TEXT(&#39;tiny&#39;)                // TINYTEXT

Sequelize.INTEGER                     // INTEGER
Sequelize.BIGINT                      // BIGINT
Sequelize.BIGINT(11)                  // BIGINT(11)

Sequelize.FLOAT                       // FLOAT
Sequelize.FLOAT(11)                   // FLOAT(11)
Sequelize.FLOAT(11, 12)               // FLOAT(11,12)

Sequelize.REAL                        // REAL        PostgreSQL only.
Sequelize.REAL(11)                    // REAL(11)    PostgreSQL only.
Sequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.

Sequelize.DOUBLE                      // DOUBLE
Sequelize.DOUBLE(11)                  // DOUBLE(11)
Sequelize.DOUBLE(11, 12)              // DOUBLE(11,12)

Sequelize.DECIMAL                     // DECIMAL
Sequelize.DECIMAL(10, 2)              // DECIMAL(10,2)

Sequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres
Sequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision 
Sequelize.DATEONLY                    // DATE without time.
Sequelize.BOOLEAN                     // TINYINT(1)

Sequelize.ENUM(&#39;value 1&#39;, &#39;value 2&#39;)  // An ENUM with allowed values &#39;value 1&#39; and &#39;value 2&#39;
Sequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.

Sequelize.JSON                        // JSON column. PostgreSQL only.
Sequelize.JSONB                       // JSONB column. PostgreSQL only.

Sequelize.BLOB                        // BLOB (bytea for PostgreSQL)
Sequelize.BLOB(&#39;tiny&#39;)                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)

Sequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)


Sequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY(&#39;POINT&#39;)           // Spatial column with geomerty type.  PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY(&#39;POINT&#39;, 4326)     // Spatial column with geomerty type and SRID.  PostgreSQL (with PostGIS) or MySQL only.
</code></pre>

<p>integer, bigint, float 和 double 同样支持 unsigned 和 zerofill 约束   </p>

<pre><code class="language-js">Sequelize.INTEGER.UNSIGNED              // INTEGER UNSIGNED
Sequelize.INTEGER(11).UNSIGNED          // INTEGER(11) UNSIGNED
Sequelize.INTEGER(11).ZEROFILL          // INTEGER(11) ZEROFILL
Sequelize.INTEGER(11).ZEROFILL.UNSIGNED // INTEGER(11) UNSIGNED ZEROFILL
Sequelize.INTEGER(11).UNSIGNED.ZEROFILL // INTEGER(11) UNSIGNED ZEROFILL
</code></pre>

<h3 id="toc_1">对象标记的用法</h3>

<pre><code class="language-js">// for enums:
sequelize.define(&#39;model&#39;, {
  states: {
    type:   Sequelize.ENUM,
    values: [&#39;active&#39;, &#39;pending&#39;, &#39;deleted&#39;]
  }
})
</code></pre>

<hr/>

<h2 id="toc_2">Getters &amp; Setters 方法</h2>

<p>在模型中定义&#39;对象-属性&#39;的 getter 和  setter 方法是可能的,可以被用来保护与数据库列相映射的属性,还可以定义一些<code>假</code>属性<br/>
Getters 和 Setters 能以下面两种方式定义</p>

<ul>
<li>作为单个属性定义的一部分</li>
<li>作为模型可选的一部分</li>
</ul>

<h2 id="toc_3">定义为属性的一部分</h2>

<pre><code class="language-js">var Employee = sequelize.define(&#39;employee&#39;, {
  name:  {
    type     : Sequelize.STRING,
    allowNull: false,
    get      : function()  {
      var title = this.getDataValue(&#39;title&#39;);
      // &#39;this&#39; 允许你去获得实例的属性
      return this.getDataValue(&#39;name&#39;) + &#39; (&#39; + title + &#39;)&#39;;
    },
  },
  title: {
    type     : Sequelize.STRING,
    allowNull: false,
    set      : function(val) {
      this.setDataValue(&#39;title&#39;, val.toUpperCase());
    }
  }
});

Employee
  .create({ name: &#39;John Doe&#39;, title: &#39;senior engineer&#39; })
  .then(function(employee) {
    console.log(employee.get(&#39;name&#39;)); // John Doe (SENIOR ENGINEER)
    console.log(employee.get(&#39;title&#39;)); // SENIOR ENGINEER
  })
</code></pre>

<h4 id="toc_4">定义为模型的一部分</h4>

<p>下面是一个在模型内定义 getter 和 setter 方法的例子. 在这个例子里,<code>fullname</code> 的 getter 方法是在模型内定义<code>假属性</code>的一个例子<br/>
,因为 <code>fullname</code>  属性不存在于数据库模式中. 实际上,假属性可以通过以下两种方式来定义</p>

<ul>
<li>通过模型的 getter 方法</li>
<li>或者通过使用带有 <a href="http://docs.sequelizejs.com/en/v3/api/datatypes#virtual"><code>VIRTUAL</code></a> 数据类型的列, VIRTUAL 数据类型可以有 validation , 然而 virtual 数据类型的 getter 方法不行</li>
</ul>

<p>注意在 <code>fullName</code> 的 getter 方法中引用的 <code>this.firstName</code> 和 <code>this.lastName</code> 会触发各自的 getter 方法</p>

<pre><code class="language-js">var Foo = sequelize.define(&#39;foo&#39;, {
  firstname: Sequelize.STRING,
  lastname: Sequelize.STRING
}, {
  getterMethods   : {
    fullName       : function()  { return this.firstname + &#39; &#39; + this.lastname }
  },
  
  setterMethods   : {
    fullName       : function(value) {
        var names = value.split(&#39; &#39;);
        this.setDataValue(&#39;firstname&#39;, names.slice(0, -1).join(&#39; &#39;));
        this.setDataValue(&#39;lastname&#39;, names.slice(-1).join(&#39; &#39;));
    },
  }
});

</code></pre>

<h4 id="toc_5">在 getter 和 setter 方法中使用的 Helper 方法</h4>

<ul>
<li>获取一个基础属性值 , 经常用 <code>this.getDataValue()</code></li>
<li>设置一个基础属性值 , 经常用 <code>this.setDataValue()</code></li>
<li>坚持使用 getter 和 setter 方法 可以保护内部数据</li>
</ul>

<pre><code class="language-js">/* &#39;title&#39; 属性的 getter 方法*/
function(){
    return this.getDataValue(&#39;title&#39;);
}

/* &#39;title&#39; 属性的 setter 方法*/
function(){
    return this.setDataValue(&#39;title&#39;,title.toString().toLowerCase());
}
</code></pre>

<h2 id="toc_6">认证 (Validation)</h2>

<p>模型认证, 可以规定模型中每个属性的格式/内容 的认证. 其实现在<a href="https://github.com/chriso/validator.js">这</a></p>

<p>当进行 <code>create</code>,<code>update</code> 和 <code>save</code>操作时,认证会自动运行.也可以在实例中手动认证</p>

<pre><code class="language-js">var ValidateMe = sequelize.define(&#39;foo&#39;, {
  foo: {
    type: Sequelize.STRING,
    validate: {
      is: [&quot;^[a-z]+$&quot;,&#39;i&#39;],     // will only allow letters
      is: /^[a-z]+$/i,          // same as the previous example using real RegExp
      not: [&quot;[a-z]&quot;,&#39;i&#39;],       // will not allow letters
      isEmail: true,            // checks for email format (foo@bar.com)
      isUrl: true,              // checks for url format (http://foo.com)
      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format
      isIPv4: true,             // checks for IPv4 (129.89.23.1)
      isIPv6: true,             // checks for IPv6 format
      isAlpha: true,            // will only allow letters
      isAlphanumeric: true,     // will only allow alphanumeric characters, so &quot;_abc&quot; will fail
      isNumeric: true,          // will only allow numbers
      isInt: true,              // checks for valid integers
      isFloat: true,            // checks for valid floating point numbers
      isDecimal: true,          // checks for any numbers
      isLowercase: true,        // checks for lowercase
      isUppercase: true,        // checks for uppercase
      notNull: true,            // won&#39;t allow null
      isNull: true,             // only allows null
      notEmpty: true,           // don&#39;t allow empty strings
      equals: &#39;specific value&#39;, // only allow a specific value
      contains: &#39;foo&#39;,          // force specific substrings
      notIn: [[&#39;foo&#39;, &#39;bar&#39;]],  // check the value is not one of these
      isIn: [[&#39;foo&#39;, &#39;bar&#39;]],   // check the value is one of these
      notContains: &#39;bar&#39;,       // don&#39;t allow specific substrings
      len: [2,10],              // only allow values with length between 2 and 10
      isUUID: 4,                // only allow uuids
      isDate: true,             // only allow date strings
      isAfter: &quot;2011-11-05&quot;,    // only allow date strings after a specific date
      isBefore: &quot;2011-11-05&quot;,   // only allow date strings before a specific date
      max: 23,                  // only allow values
      min: 23,                  // only allow values &gt;= 23
      isArray: true,            // only allow arrays
      isCreditCard: true,       // check for valid credit card numbers

      // custom validations are also possible:
      isEven: function(value) {
        if(parseInt(value) % 2 != 0) {
          throw new Error(&#39;Only even values are allowed!&#39;)
        // we also are in the model&#39;s context here, so this.otherField
        // would get the value of otherField if it existed
        }
      }
    }
  }
});
</code></pre>

<p>注意当多个参数需要被传递到内嵌的认证函数时,多个参数应该被放在一个数组中.</p>

<pre><code class="language-js">isIn: [[&#39;en&#39;, &#39;zh&#39;]],   // check the value is one of these
</code></pre>

<p>不用 validator.js 提供的错误信息,自己定制错误信息</p>

<pre><code class="language-js">isIn: {
  args: [[&#39;en&#39;, &#39;zh&#39;]],
  msg: &quot;Must be English or Chinese&quot;
}
</code></pre>

<p>可以看<a href="https://github.com/chriso/validator.js">validator.js PROJECT</a>获取更多细节</p>

<hr/>

<h3 id="toc_7">认证器和 <code>allowNull</code></h3>

<p>如果模型的列被设置为 <code>allowNull:true</code> 和 值被设置为 <code>null</code>的话,那认证器不会运行.</p>

<p>举个栗子, 一个字符串的列长度设置为 最短为5, 但它可以存储 null</p>

<h3 id="toc_8">模型认证</h3>

<pre><code class="language-js">var Pub = Sequelize.define(&#39;pub&#39;, {
  name: { type: Sequelize.STRING },
  address: { type: Sequelize.STRING },
  latitude: {
    type: Sequelize.INTEGER,
    allowNull: true,
    defaultValue: null,
    validate: { min: -90, max: 90 }
  },
  longitude: {
    type: Sequelize.INTEGER,
    allowNull: true,
    defaultValue: null,
    validate: { min: -180, max: 180 }
  },
}, {


  //在这里对模型进行验证,只有 latitude 和 longtitude 同时被给予或都为空时成立
  validate: {
    bothCoordsOrNone: function() {
      if ((this.latitude === null) !== (this.longitude === null)) {
        throw new Error(&#39;Require either both latitude and longitude or neither&#39;)
      }
    }
  }
})
</code></pre>

<hr/>

<h2 id="toc_9">配置</h2>

<pre><code class="language-js">var Bar = sequelize.define(&#39;bar&#39;, { /* bla */ }, {

  // 不增加 TIMESTAMP 属性  (updatedAt, createdAt)
  timestamps: false,
  
  //不删除数据库中原有项, 增加新属性 deletedAt 并设置为 当前日期,
  //只有 TIMESTAMP 属性是允许的时候有效
  paranoid: true,
  
  // 不要使用驼峰式语法,用下划线代替
  // so updatedAt will be updated_at
  underscored: true,
  
  // 不允许调整表名 ; 
  // 默认地, sequelize 会自动转换所有传递的模型名字(define 的第一个参数)
  // 为复数
  // 如果不想这样,设置为 true
  freezeTableName: true,

  // 定义表名
  tableName: &#39;my_very_custom_table_name&#39;
})
</code></pre>

<p>修改引擎</p>

<pre><code class="language-js">var Person = sequelize.define(&#39;person&#39;, { /* attributes */ }, {
  engine: &#39;MYISAM&#39;
})

// or globally
var sequelize = new Sequelize(db, user, pw, {
  define: { engine: &#39;MYISAM&#39; }
})
</code></pre>

<p>做注释</p>

<pre><code class="language-js">var Person = sequelize.define(&#39;person&#39;, { /* attributes */ }, {
  comment: &quot;I&#39;m a table comment!&quot;
})
</code></pre>

<hr/>

<h2 id="toc_10">导入</h2>

<p>可以把对表的定义放在单一文件中,返回对象恰好跟在 import 方法中定义的一样</p>

<pre><code class="language-js">
  // in your server file - e.g. app.js
var Project = sequelize.import(__dirname + &quot;/path/to/models/project&quot;)

  // 定义在 project.js 文件中已经定义完成了
  // DataTypes  与上面解释的部分很像
module.exports = function(sequelize, DataTypes) {
  return sequelize.define(&quot;project&quot;, {
    name: DataTypes.STRING,
    description: DataTypes.TEXT
  })
}

sequelize.import(&#39;project&#39;, function(sequelize, DataTypes) {
  return sequelize.define(&quot;project&quot;, {
    name: DataTypes.STRING,
    description: DataTypes.TEXT
  })
})
</code></pre>

<h2 id="toc_11">数据库同步</h2>

<p>开始一个新项目的时候,我们没有数据库架构,于是我们不需要 Sequelize.</p>

<p>只需要说明我们的模型结构, 让库做剩下的部分,现在只支持 <code>表的创建与删除</code></p>

<pre><code class="language-js">// 只同步还没在数据库中的模型
// Sync all models that aren&#39;t already in the database
sequelize.sync()

// 强制同步所有数据库的模型
sequelize.sync({force: true})

// 删除所有表
sequelize.drop()

// 开始执行
sequelize.[sync|drop]().then(function() {
  // woot woot
}).catch(function(error) {
  // whooops
})
</code></pre>

<p>因为<code>.sync({force: true})</code> 是毁灭性的操作, 可以使用 match 选项去增加更多的安全检查(正则)</p>

<pre><code class="language-js">// 删除以 &#39;_test&#39; 结尾的词
sequelize.sync({ force: true, match: /_test$/ });
</code></pre>

<hr/>

<h2 id="toc_12">模型的扩展</h2>

<p>Sequelize 允许我们去给 模型和相应的实例 传递定制方法 </p>

<pre><code class="language-js">var sequelize = new Sequelize(&#39;database&#39;, &#39;username&#39;, &#39;password&#39;, {
  // 其他可选的初始化可以放在这里
  define: {
    classMethods: {
      method1: function() {},
      method2: function() {}
    },
    instanceMethods: {
      method3: function() {}
    }
  }
})

// Example:
var Foo = sequelize.define(&#39;foo&#39;, { /* attributes */});
Foo.method1()
Foo.method2()
Foo.build().method3()
</code></pre>

<hr/>

<h2 id="toc_13">索引</h2>

<p>Sequelize 支持在模型定义中增加索引, 这些索引在 <code>Model.sync()</code> 或 <code>sequelize.sync()</code>时被创建.</p>

<pre><code class="language-js">sequelize.define(&#39;user&#39;, {}, {
  indexes: [
    // Create a unique index on email
    {
      unique: true,
      fields: [&#39;email&#39;]
    },

    // Creates a gin index on data with the jsonb_path_ops operator
    {
      fields: [&#39;data&#39;],
      using: &#39;gin&#39;,
      operator: &#39;jsonb_path_ops&#39;
    },

    // By default index name will be [table]_[fields]
    // Creates a multi column partial index
    {
      name: &#39;public_by_author&#39;,
      fields: [&#39;author&#39;, &#39;status&#39;],
      where: {
        status: &#39;public&#39;
      }
    },

    // A BTREE index with a ordered field
    {
      name: &#39;title_index&#39;,
      method: &#39;BTREE&#39;,
      fields: [&#39;author&#39;, {attribute: &#39;title&#39;, collate: &#39;en_US&#39;, order: &#39;DESC&#39;, length: 5}]
    }
  ]
})
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符数组 vs 字符串常量]]></title>
    <link href="http://blog.kayorl.com/14872295002950.html"/>
    <updated>2017-02-16T15:18:20+08:00</updated>
    <id>http://blog.kayorl.com/14872295002950.html</id>
    <content type="html"><![CDATA[
<p>两者区别在哪？</p>

<span id="more"></span><!-- more -->

<p>在 C 语言中,有两种表示字符串的方法</p>

<ol>
<li>字符串数组 char str[6]=&quot;123456&quot;;</li>
<li>字符串常量    char *str=&quot;123456&quot;;</li>
</ol>

<h2 id="toc_0">字符数组</h2>

<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(int argc, const char * argv[]) {
    char str[6]=&quot;123456&quot;;
    //%x ,十六进制
    printf(&quot;%x\n&quot;,&amp;str);
    printf(&quot;%x\n&quot;,str);
    printf(&quot;%x\n&quot;,&amp;str[0]);
    return 0;
}
</code></pre>

<p>输出结果如下:</p>

<pre><code>5fbff849    
5fbff849
5fbff849
</code></pre>

<table>
<thead>
<tr>
<th style="text-align: center">表达</th>
<th style="text-align: center">解释</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">&amp;str</td>
<td style="text-align: center">str[6]=...时已为分配了6字节的内存地址给 str 数组,打印出的是首字符的内存地址</td>
</tr>
<tr>
<td style="text-align: center">str</td>
<td style="text-align: center">可以理解成数组变量退化的指针，并且指向数组的开头</td>
</tr>
<tr>
<td style="text-align: center">&amp;str[0]</td>
<td style="text-align: center">数组中第一个字符的内存地址</td>
</tr>
</tbody>
</table>

<h2 id="toc_1">字符串常量</h2>

<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(int argc, const char * argv[]) {
    char *str;
    str=&quot;123456&quot;;
    //
    //等价
    //char *str=&quot;123456&quot;;
    //
    printf(&quot;%x\n&quot;,&amp;str);
    printf(&quot;%x\n&quot;,str);
    printf(&quot;%x\n&quot;,&amp;str[0]);
    return 0;
}
</code></pre>

<p>输出结果如下</p>

<pre><code>5fbff848
f92
f92
</code></pre>

<table>
<thead>
<tr>
<th style="text-align: center">表达</th>
<th style="text-align: center">解释</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">&amp;str</td>
<td style="text-align: center">char *str=&quot;123456&quot; , 声明了一个 char 类型的指针变量,该指针指向存放&quot;123456&quot;内存地址,所以该指针变量的地址跟下面两个不一样</td>
</tr>
<tr>
<td style="text-align: center">str</td>
<td style="text-align: center">指针变量所指地址空间的内存地址</td>
</tr>
<tr>
<td style="text-align: center">&amp;str[0]</td>
<td style="text-align: center">数组中第一个字符的内存地址</td>
</tr>
</tbody>
</table>

<h2 id="toc_2">区别</h2>

<table>
<thead>
<tr>
<th style="text-align: left">方式</th>
<th style="text-align: center">存储位置</th>
<th style="text-align: right">权限</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">字符数组</td>
<td style="text-align: center">全局数据区或栈区</td>
<td style="text-align: right">读取,写入</td>
</tr>
<tr>
<td style="text-align: left">字符串常量</td>
<td style="text-align: center">常量</td>
<td style="text-align: right">读取</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(1)  让Node操作MySQL更方便]]></title>
    <link href="http://blog.kayorl.com/14872314142143.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142143.html</id>
    <content type="html"><![CDATA[
<p>Sequelize是一种为 Node.js 和 io.js  提供 promise-based 的 的<code>对象关系映射</code>（ORM），支持  PostgreSQL, <code>MySQL</code>, MariaDB, SQLite 和 MSSQL 等数据库管理系统 ，同时提供 <code>事务支持</code>，<code>关系</code>，<code>复制</code>还有其他等特性. </p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">ORM</h2>

<p><a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84">对象关系映射</a>（英语：Object Relational Mapping，简称ORM），是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。</p>

<h2 id="toc_1">例子（ mysql 为例 ）</h2>

<pre><code class="language-js">var Sequelize = require(&#39;sequelize&#39;);
var sequelize = new Sequelize(&#39;database&#39;, &#39;username&#39;, &#39;password&#39;);

var User = sequelize.define(&#39;user&#39;, {
  username: Sequelize.STRING,
  birthday: Sequelize.DATE
});

sequelize.sync().then(function() {
  return User.create({
    username: &#39;janedoe&#39;,
    birthday: new Date(1980, 6, 20)
  });
}).then(function(jane) {
  console.log(jane.get({
    plain: true
  }));
});
</code></pre>

<p></br></p>

<h2 id="toc_2">安装</h2>

<pre><code>$ npm install --save sequelize
$ npm install --save mysql
</code></pre>

<p></br></p>

<h2 id="toc_3">建立连接</h2>

<pre><code class="language-js">var sequelize = new Sequelize(&#39;database&#39;, &#39;username&#39;, &#39;password&#39;, {
  host: &#39;localhost&#39;,
  /* 数据库类型 */
  dialect: &#39;mysql&#39; 
});
</code></pre>

<p></br></p>

<h2 id="toc_4">第一个模型</h2>

<p>定义模型： <code>sequelize.define(&#39;name&#39;, {attributes}, {options})</code></p>

<pre><code class="language-js">var User = sequelize.define(&#39;user&#39;, {
  firstName: {
    type: Sequelize.STRING,
    /* User模型拥有firstName属性，在数据库中相应的属性为first_name  */
    field: &#39;first_name&#39;   
    },
  lastName: {
    type: Sequelize.STRING
  }
}, {
  /* 数据库表名与模型名字一致 */
  freezeTableName: true 
});

User.sync({force: true}).then(function () {
  // Table created
  return User.create({
    firstName: &#39;kayor&#39;,
    lastName: &#39;lien&#39;
  });
});
</code></pre>

<p>按照以前的习惯,我们可能会通过下面这种方式来获取<code>user</code>.</p>

<pre><code class="language-js">// DON&#39;T DO THIS !!!

user = User.findOne()

console.log(user.get(&#39;firstName&#39;));
</code></pre>

<p></br></p>

<p>然而这行不通(不信去试试😝)</p>

<p>为什么呢? 接下来引入一个概念</p>

<h2 id="toc_5">Promises</h2>

<p>Sequelize 使用 Promises 控制异步流。 可以看看 <a href="14872467449529.html">Promises 解决Node无限回调</a></p>

<blockquote>
<p><a href="https://www.promisejs.org/">Promises</a>的核心是:</p>

<p>一个 promise 代表了<strong>异步运算的结果</strong>，它有三种状态：</p>
</blockquote>

<ul>
<li>pending - promise 的初始状态（即将发生）</li>
<li>fulfilled  - 一次成功运算后 promise 的状态</li>
<li>rejected - 一次失败运算后 promise 的状态</li>
</ul>

<pre><code class="language-js">function readFile(filename, enc){
  /*  
   *使用 new promise 构建一个新的 promise  */
  return new Promise(function (fulfill, reject){
    fs.readFile(filename, enc, function (err, res){
      if (err) reject(err);         //失败运算
      else fulfill(res);            //成功运算
    });
  });
}
</code></pre>

<p><code>user</code>是一个 promise 对象， 不是数据库的对象，正确的打开姿势是，在获取到<code>user</code>的状态（如 fulfilled, rejected ）后，对其进行操作：</p>

<pre><code class="language-js">User.findOne().then(function (user) {
    console.log(user.get(&#39;firstName&#39;));
});
</code></pre>

<hr/>

<p>本文参考: <a href="http://docs.sequelizejs.com/en/v3/">Sequelize</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 数据类型]]></title>
    <link href="http://blog.kayorl.com/14872295002814.html"/>
    <updated>2017-02-16T15:18:20+08:00</updated>
    <id>http://blog.kayorl.com/14872295002814.html</id>
    <content type="html"><![CDATA[
<p>blob ？显示宽度？</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">属性</h2>

<table>
<thead>
<tr>
<th style="text-align: left">类型</th>
<th style="text-align: center">简写</th>
<th style="text-align: center">作用</th>
<th style="text-align: right">适用范围</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">UNSIGNED</td>
<td style="text-align: center">UN</td>
<td style="text-align: center">防止出现负值</td>
<td style="text-align: right">除 BIT 以外</td>
</tr>
<tr>
<td style="text-align: left">ZEROFILL</td>
<td style="text-align: center">ZF</td>
<td style="text-align: center">在列里的显示值前填充若干个0 (与显示宽度相关)</td>
<td style="text-align: right">除 BIT 以外</td>
</tr>
<tr>
<td style="text-align: left">AUTO_INCREMENT</td>
<td style="text-align: center">AI</td>
<td style="text-align: center">表示该列存放的是序号( ID ).如果没为 ID 列提供值,那 MySQL 会<code>自动生成</code>下一个编号.删除某几行后,删除的序号可能会被再使用,得看使用的引擎</td>
<td style="text-align: right">一般用于整数 且有 <code>NOT NULL</code>(自动隐式添加) 和 <code>UNSIGNED</code> 属性</td>
</tr>
<tr>
<td style="text-align: left">NULL/NOT NULL</td>
<td style="text-align: center">NN</td>
<td style="text-align: center">指定列能否为 NULL</td>
<td style="text-align: right">除了 有 <code>AI</code> 的列</td>
</tr>
</tbody>
</table>

<h2 id="toc_1">数字</h2>

<table>
<thead>
<tr>
<th style="text-align: left">类型</th>
<th style="text-align: center">范围  ( 无符号 , 0~ )</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">TINYINT (M)</td>
<td style="text-align: center">255</td>
</tr>
<tr>
<td style="text-align: left">SMALLINT (M)</td>
<td style="text-align: center">65535</td>
</tr>
<tr>
<td style="text-align: left">MEDIUMINT (M)</td>
<td style="text-align: center">16777215</td>
</tr>
<tr>
<td style="text-align: left">INT (M)</td>
<td style="text-align: center">2ˆ32-1</td>
</tr>
<tr>
<td style="text-align: left">BIGINT  (M)</td>
<td style="text-align: center">2ˆ64-1</td>
</tr>
<tr>
<td style="text-align: left">DECIMAL ( [ M [ ,D ] ] )</td>
<td style="text-align: center">由 M 和 D 的值决定</td>
</tr>
<tr>
<td style="text-align: left">FLOAT  ( [ M [ ,D ] ] )</td>
<td style="text-align: center">最大非零: ±3.402823466E+38</td>
</tr>
<tr>
<td style="text-align: left">DOUBLE  ( [ M [ ,D ] ] )</td>
<td style="text-align: center">最大非零: ± 1.7976931348623157E+308</td>
</tr>
<tr>
<td style="text-align: left">BIT  ([M])</td>
<td style="text-align: center">2ˆM-1,  1&lt;= M &lt;= 64</td>
</tr>
</tbody>
</table>

<p><code>D</code> : 数学精确度,即小数点后的数字个数<br/>
<code>M</code> : 显示宽度,为1~255 的整数.决定 MySQL 用多少个字符<code>显示</code>该列的值,与<code>存储该值所需的字节存储空间无关</code>,默认为最长值的长度 . 一般结合 <code>ZEROFILL</code> 使用</p>

<p><strong>举例</strong> <br/>
INT(2)的列,每个值仍占用<code>4个字节</code> (32bit) 的空间,假设有一个值取为2,那么将会显示 02 </p>

<hr/>

<h2 id="toc_2">字符串</h2>

<p>MySQL字符串可以表示任何值, 它实际上是一种 &quot;泛型&quot; 类型.例如,可以用二进制串存储二进制数据,如图像,声音,压缩后的gzip 输出.</p>

<ul>
<li><code>二进制串</code>: 01010101010</li>
<li>非二进制串: ......</li>
</ul>

<table>
<thead>
<tr>
<th style="text-align: center">类型</th>
<th style="text-align: center">存储二进制串</th>
<th style="text-align: center">最大长度 (字节)</th>
<th style="text-align: center">存储空间要求 (字节)</th>
<th style="text-align: center">说明</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center"><code>BINARY[(M)]</code></td>
<td style="text-align: center">√</td>
<td style="text-align: center">M</td>
<td style="text-align: center">M</td>
<td style="text-align: center">M : 表示该列值的最大长度 (二进制串以字节为长度,非二进制串以字符单位)</td>
</tr>
<tr>
<td style="text-align: center">CHAR[(M)]</td>
<td style="text-align: center"></td>
<td style="text-align: center">M</td>
<td style="text-align: center">M  x  w</td>
<td style="text-align: center">w : 表示列字符集里<code>最&quot;宽&quot;</code>字符占用的字节数(定长补足用)</td>
</tr>
<tr>
<td style="text-align: center"><code>VARBINARY(M)</code></td>
<td style="text-align: center">√</td>
<td style="text-align: center">M</td>
<td style="text-align: center">L+1 or L+2</td>
<td style="text-align: center">L : 表示某个<code>给定值</code>的字节长度</td>
</tr>
<tr>
<td style="text-align: center">VARCHAR(M)</td>
<td style="text-align: center"></td>
<td style="text-align: center">M</td>
<td style="text-align: center">L+1 or L+2</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"><code>BLOB(binary large object)</code></td>
<td style="text-align: center">√</td>
<td style="text-align: center">2ˆ16-1</td>
<td style="text-align: center">L+2</td>
<td style="text-align: center">可以存储大对象(4 GB),字节为单位</td>
</tr>
<tr>
<td style="text-align: center">TEXT</td>
<td style="text-align: center"></td>
<td style="text-align: center">2ˆ16-1</td>
<td style="text-align: center">L+2</td>
<td style="text-align: center">字符为单位</td>
</tr>
<tr>
<td style="text-align: center">ENUM(&#39;value1&#39;,&#39;value2&#39;,...)</td>
<td style="text-align: center"></td>
<td style="text-align: center">65535个成员</td>
<td style="text-align: center">1 or 2</td>
<td style="text-align: center">定义的值顺序就是排序所用的顺序</td>
</tr>
<tr>
<td style="text-align: center">SET(&#39;value1&#39;,&#39;value2&#39;,...)</td>
<td style="text-align: center"></td>
<td style="text-align: center">64个成员</td>
<td style="text-align: center">1,2,3,4,8</td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

<ul>
<li>BLOB 和 TEXT 列能否被索引取决于存储引擎,如果用 InnoDB 和 MyISAM, 必须制定一个前缀长度,方便索引.可以避免创建出可能过大的索引,那样会抵消索引带来的好处. 比较特殊的是 TEXT 列的 <code>FULLTEXT</code> 索引以索引列的完整内容为基础,自动忽略指定的前缀长度</li>
<li>BLOB,TEXT 在多次操作之后会产生大量碎片,如果用 MyISAM 来存储 BLOB 或 TEXT, 那么定期运行 <code>OPTIMIZE TABLE</code> 可以减少碎片,改善系统性能</li>
</ul>

<hr/>

<h2 id="toc_3">时态</h2>

<ul>
<li>fsp: 小数秒精度</li>
<li>时态列的定义可以包含通用属性 NULL 或 NOT NULL. 如果都不指定, 则默认为 NULL. </li>
<li>TIMESTAMP 和 DATETIME 有自动初始化属性和自动更新属性</li>
<li>TIMESTAMP 的<code>默认值</code>为 NOT NULL, 如果设置为 NULL, 那么它的值会被设置为当前时间戳</li>
<li>TIMESTAMP 不能设置为 <code>DEFAULT 0</code>,严格模式下会报错</li>
</ul>

<table>
<thead>
<tr>
<th style="text-align: center">类型</th>
<th style="text-align: center">范围</th>
<th style="text-align: center">存储要求(字节)(5.6.4以后)</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">DATE</td>
<td style="text-align: center">1000-01-01 ~ 9999-12-31</td>
<td style="text-align: center">3</td>
</tr>
<tr>
<td style="text-align: center">TIME</td>
<td style="text-align: center">-838:59:59[.000000] ~ 838:59:59[.000000]</td>
<td style="text-align: center">3 + fsp</td>
</tr>
<tr>
<td style="text-align: center">DATETIME</td>
<td style="text-align: center">1000-01-01 00:00:00[.000000] ~ 9999-12-31 23.59.59[.999999]</td>
<td style="text-align: center">3 + fsp</td>
</tr>
<tr>
<td style="text-align: center">TIMESTAMP</td>
<td style="text-align: center">1970-01-01 00:00:00[.000000] ~ 2038-01-19 03:14:07[.999999]</td>
<td style="text-align: center">4 + fsp</td>
</tr>
<tr>
<td style="text-align: center">YEAR</td>
<td style="text-align: center">1901~2155</td>
<td style="text-align: center">1</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promises 解决Node无限回调]]></title>
    <link href="http://blog.kayorl.com/14872467449529.html"/>
    <updated>2017-02-16T20:05:44+08:00</updated>
    <id>http://blog.kayorl.com/14872467449529.html</id>
    <content type="html"><![CDATA[
<p>Promises 是异步代码（如 Node.js） 实现控制流的方式， 可以让代码更干净，可读。</p>

<span id="more"></span><!-- more -->

<p>利用 Promises 可以将</p>

<pre><code class="language-js">fs.readFile(&quot;file.json&quot;, function (err, val) {
    if (err) {
        console.error(&quot;unable to read file&quot;);
    }
    else {
        try {
            val = JSON.parse(val);
            console.log(val.success);
        }
        catch (e) {
            console.error(&quot;invalid json in file&quot;);
        }
    }
});
</code></pre>

<p>转化成</p>

<pre><code class="language-js">fs.readFileAsync(&quot;file.json&quot;).then(JSON.parse).then(function (val) {
    console.log(val.success);
})
.catch(SyntaxError, function (e) {
    console.error(&quot;invalid json in file&quot;);
})
.catch(function (e) {
    console.error(&quot;unable to read file&quot;);
});
</code></pre>

<p></br><br/>
然而 核心模块 <code>fs</code> 并没有 <code>readFileAsync</code> 方法, 可以使用 <a href="http://bluebirdjs.com/docs/api/promisification.html">promisfication</a> 大法.</p>

<h2 id="toc_0">Promisfication</h2>

<p>Promisfication 可以转化已存在的 promise-unaware API  为 promise-returning API</p>

<p>通常 Node 使用 promises 的办法是去 <code>Promise.promisifyAll</code> 一些 API</p>

<pre><code class="language-js">var fs = require(&quot;fs&quot;);
Promise.promisifyAll(fs);

fs.readFileAsync(&quot;file.js&quot;, &quot;utf8&quot;).then(...)
</code></pre>

<p>要注意到这是特殊状况, 因为 <code>fs</code> 是一个单例.  大多数库能够通过 <code>require</code> 一些库里的类(构造函数)和在 <code>.prototype</code>上调用 promisify 对该实例 promise 化.</p>

<p>每个实例的 promise 化在应用的生命周期内只需被调用一次,此后依据该实例原来的文档进行操作, <code>除了在方法后面增加Async 和用 promise 接口替代原来的 callback 接口</code>.</p>

<pre><code class="language-js">// Mysql 模块
var Promise = require(&quot;bluebird&quot;);
//
// 库里面的类并不是模块直接导出,所以需要手动的require
//
Promise.promisifyAll(require(&quot;mysql/lib/Connection&quot;).prototype);
Promise.promisifyAll(require(&quot;mysql/lib/Pool&quot;).prototype);
</code></pre>

<p>参考<a href="http://bluebirdjs.com/docs/why-promises.html">bluebirkjs</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 术语]]></title>
    <link href="http://blog.kayorl.com/14872294485144.html"/>
    <updated>2017-02-16T15:17:28+08:00</updated>
    <id>http://blog.kayorl.com/14872294485144.html</id>
    <content type="html"><![CDATA[
<p>MySQL？mysql？ 什么来的</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">结构术语</h2>

<p>MySQL被划分为关系数据库管理系统(<code>RDBMS</code>)</p>

<ul>
<li>数据库(DataBase, <code>DB</code> ), 是以用来存储信息的仓库,他的结构简单,规则.</li>
<li>管理系统(Manage System, <code>MS</code> ) , 是一个软件,可以通过它来 insert, retrieve, modify, 或者 delete 记录.</li>
<li>关系(Relational, <code>R</code> ), 表示这是一种特殊的 DBMS, 可以将多个表通过联系链接起来.</li>
</ul>

<h2 id="toc_1">MySQL 的查询结构术语</h2>

<p>使用 MySQL 的时候,实际上至少会用到两个程序,因为 MySQL 采用的是 <code>CS</code> 体系结构.</p>

<ul>
<li><code>mysqld</code> : MySQL 服务器,它运行在存放数据库的机器上,提供服务</li>
<li><code>MySQL 客户端</code> : 它负责连接到数据库服务器,并发起请求</li>
</ul>

<p>这种结构有下面的好处:</p>

<ul>
<li>服务器强制执行<code>并发控制</code>,可以防止两个用户修改同一条数据库.所有请求都会经过服务器,由服务器安排先后顺序</li>
</ul>

<blockquote>
<p>MySQL与 mysql 的差异:</p>
</blockquote>

<ul>
<li>MySQL, 是 RDBMS </li>
<li>mysql, 是 客户端程序(运行在命令行中的)</li>
</ul>

]]></content>
  </entry>
  
</feed>
