<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[几谷 博客]]></title>
  <link href="http://blog.kayorl.com/atom.xml" rel="self"/>
  <link href="http://blog.kayorl.com/"/>
  <updated>2017-03-27T15:34:16+08:00</updated>
  <id>http://blog.kayorl.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[事件处理 之 跨浏览器]]></title>
    <link href="http://blog.kayorl.com/14905364754279.html"/>
    <updated>2017-03-26T21:54:35+08:00</updated>
    <id>http://blog.kayorl.com/14905364754279.html</id>
    <content type="html"><![CDATA[
<p>由于各浏览器的事件对象存在差异,利用下面的 <code>EventUtil</code> 对象可以跨浏览器处理事件</p>

<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">增减监听器</a>
</li>
<li>
<a href="#toc_1">获取 target 属性</a>
</li>
<li>
<a href="#toc_2">阻止系统默认行为</a>
</li>
<li>
<a href="#toc_3">获取事件</a>
</li>
<li>
<a href="#toc_4">停止事件在 DOM 层次中的传播</a>
</li>
<li>
<a href="#toc_5">修正鼠标按钮问题</a>
</li>
<li>
<a href="#toc_6">修正任意情况下滚轮的取值</a>
</li>
<li>
<a href="#toc_7">获取按键事件的字符编码</a>
</li>
</ul>


<h2 id="toc_0">增减监听器</h2>

<pre><code class="language-js">var EventUtil = {
    addHandler: function(element, type, handler) {
        if (element.addEventListener) {
            element.addEventListener(type, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent(type, handler);
        } else {
            element[&quot;on&quot; + type] = handler;
        }
    },
    removeHandler: function(element, type, handler) {
        if (element.removeEventListener) {
            element.removeEventListener(type, handler, false);
        } else if (element.detachEvent) {
            element.detachEvent(type, handler);
        } else {
            element[&quot;on&quot; + type] = null;
        }
    }
}
</code></pre>

<h2 id="toc_1">获取 target 属性</h2>

<pre><code class="language-js">var EventUtil = {
    
    ...
    /**
     * 使用 DOM0 级方法处理时, 事件处理的作用域是根据指定的方式确定的, 
                            this 不会始终等于事件目标,因而用 srcElement
     */  
    getTarget: function(event) {
        return event.target ? event.target : event.srcElement;
    }
}
</code></pre>

<h2 id="toc_2">阻止系统默认行为</h2>

<pre><code class="language-js">var EventUtil = {
    
    ...
    
    /**
     * 阻止默认行为,如点击链接时自动跳转
     * 使用 DOM0 级方法处理时, returnValue 属性相当于 preventDefault 方法
     */
    preventDefault: function(event) {
        if (even.preventDefault) {
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
    }
}
</code></pre>

<h2 id="toc_3">获取事件</h2>

<pre><code class="language-js">var EventUtil = {
    
    ...
    
    /**
     * 使用 DOM0 级方法处理时, event 对象作为 window 对象的一个属性存在
     */
    getEvent: function(event) {
        return event ? event : window.event;
    },
  
}

</code></pre>

<h2 id="toc_4">停止事件在 DOM 层次中的传播</h2>

<pre><code class="language-js">var EventUtil = {
    
    ...
    
    /**
     * 立即停止事件在 DOM 层次中的传播
     * 使用 DOM0 级方法处理时, cancelBubble 属性相当于 stopPropagation 方法
     */
    stopPropagation: function(event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        } else {
            event.cancelBubble = true;
        }
    }
}

</code></pre>

<h2 id="toc_5">修正鼠标按钮问题</h2>

<pre><code class="language-js">var EventUtil= {
    
    ...
    
    /**
     * IE8 的问题........
     * 0 : 主按钮, 1 : 滚轮 , 2 : 次按钮
     */
    getButton: function(event) {
        if (document.implementation.hasFeature(&quot;MouseEvents&quot;, &quot;2.0&quot;)) {
            return event.button;
        } else {
            switch (event.button) {
                case 0:
                case 1:
                case 3:
                case 5:
                case 7:
                    return 0;
                case 2:
                case 6:
                    return 2;
                case 4:
                    return 1;
            }
        }
    }
};
</code></pre>

<h2 id="toc_6">修正任意情况下滚轮的取值</h2>

<pre><code class="language-js">var EventUtil = {

    ...
    
    /**
     * 向前为加
     * opera 9.5 之前的版本中, wheelDelta 值正负号是颠倒的
     * FireFox 的滚轮信息保存在 detail 中,且值为 正常 wheelDelta 的 1 /40 
     */
    getWheelDelta: function(event) {
        if (event.wheelDelta) {
            return (client.engine.opera &amp;&amp; client.engine.opera &lt; 9.5 ? -event.wheelDelta : event.wheelDelta);
        } else {
            return -event.detail * 40;
        }
    }
};

/**
 * 修正任意情况下滚轮的取值
 */
(function() {
    function handleMouseWheel(event) {
        event.EventUtil.getEvent(event);
        var delta = EventUtil.getWheelDelta(event);
    }
    EventUtil.addHandler(document, &quot;mousewheel&quot;, handleMouseWheel);
    EventUtil.addHandler(document, &quot;DOMMouseScroll&quot;, handleMouseWheel);
})();
</code></pre>

<h2 id="toc_7">获取按键事件的字符编码</h2>

<pre><code class="language-js">var EventUtil = {
    
    ...
    
    /**
     * &lt;=IE8 及 opera 在 keyCode 中保存字符的 ASCII 编码
     */
    getCharCode: function(event) {
        if (typeof event.charCode == &quot;number&quot;) {
            return event.charCode;
        } else {
            return event.keyCode;
        }
    }
}

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[外边距折叠]]></title>
    <link href="http://blog.kayorl.com/margin-collapse.html"/>
    <updated>2017-03-23T09:15:30+08:00</updated>
    <id>http://blog.kayorl.com/margin-collapse.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>毗邻的两个或多个外边距 (margin) 会合并成一个外边距。</p>
</blockquote>

<span id="more"></span><!-- more -->

<blockquote>
<p>参考 MDN 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing">Mastering_margin_collapsing</a><br/>
以及 w3help 的 <a href="http://www.w3help.org/zh-cn/kb/006/#header_3">CSS 框模型</a></p>
</blockquote>

<p>外边距毗邻,可以被归结为2点</p>

<ul>
<li>这两个或多个外边距没有被<code>非空内容</code>、<code>padding</code>、<code>border</code> 或 <code>clear</code> 分隔开。</li>
<li>margin 处于<code>普通流中</code></li>
</ul>

<h2 id="toc_0">两个或多个毗邻的普通流中的块元素垂直方向上的 margin 会折叠</h2>

<p><strong>两个或多个</strong><br/>
说明其数量必须是大于一个，又说明，折叠是元素与元素间相互的行为，不存在 A 和 B 折叠，B 没有和 A 折叠的现象。</p>

<p><strong>毗邻</strong>,兄弟父子都可以毗邻<br/>
是指没有被非空内容、padding、border 或 clear 分隔开，说明其位置关系。</p>

<p>注意一点，在没有被分隔开的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻； <u>只有在一个元素的 height 是 &quot;auto&quot; 的情况下，它的 margin-bottom 才会和它普通流中的最后一个子元素(非浮动元素等)的 margin-bottom 相邻</u>。</p>

<p><strong>垂直方向</strong><br/>
是指具体的方位，只有垂直方向的 margin 才会折叠，也就是说，水平方向的 margin 不会发生折叠的现象。</p>

<h2 id="toc_1">折叠后的 margin 的计算</h2>

<blockquote>
<p>MAX(正数) + MIN(负数) ,方向由符号决定</p>
</blockquote>

<ol>
<li>+20px, +10px , 取20px , 正向位移</li>
<li>-20px, -10px , 取-20px, 负向位移</li>
<li>+20px, -20px , -10px,  取 -20px + 20px = 0, 不位移</li>
</ol>

<blockquote>
<p>相邻 margin 要一起参与运算</p>
</blockquote>

<p>A 及 A 的父 , B 及 B 的父 , 都得参与运算,不能分别算完AB 的父元素之后再合并</p>

<pre><code>&lt;div style=&quot;margin:50px 0; background-color:green; width:50px;&quot;&gt;
    &lt;div style=&quot;margin:-60px 0;&quot;&gt;
           &lt;div style=&quot;margin:150px 0;&quot;&gt;A&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;margin:-100px 0; background-color:green; width:50px;&quot;&gt;
    &lt;div style=&quot;margin:-120px 0;&quot;&gt;
           &lt;div style=&quot;margin:200px 0;&quot;&gt;B&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h2 id="toc_2">不折叠与自身折叠</h2>

<ul>
<li>浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠</li>
<li>创建了块级格式化上下文的元素，不和它的子元素发生 margin 折叠 ,如<code>overflow:hidden</code></li>
<li>元素自身的 margin-bottom 和 margin-top 相邻时也会折叠</li>
</ul>

<h2 id="toc_3">折叠反向</h2>

<p>在水平书写模式下，<code>margin</code> 折叠的是垂直方向，即 <code>margin-top/margin-bottom</code><br/>
在垂直书写模式下，<code>margin</code> 折叠的是水平方向，即 <code>margin-right/margin-left</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css 元素垂直、水平居中]]></title>
    <link href="http://blog.kayorl.com/css-centering.html"/>
    <updated>2017-03-22T20:42:56+08:00</updated>
    <id>http://blog.kayorl.com/css-centering.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">水平居中</h2>

<blockquote>
<p>inline-*</p>
</blockquote>

<pre><code>inline-* {
    text-align: center;
}
</code></pre>

<blockquote>
<p>已知高度的 block </p>
</blockquote>

<pre><code>block {
    margin: 0 auto; 
}
</code></pre>

<blockquote>
<p>未知高度的 block</p>
</blockquote>

<pre><code>block {
    display: inline-block;  
    text-align: center; 
}
</code></pre>

<h2 id="toc_1">垂直居中</h2>

<blockquote>
<p>inline 单行</p>
</blockquote>

<pre><code>inline-* {
    padding-top: 30px;   
    padding-bottom:30px; 
}
</code></pre>

<pre><code>inline-* {
    line-height: height;
    /* height 为元素高度 */
}
</code></pre>

<blockquote>
<p>inline 多行</p>
</blockquote>

<p>第一种方法,利用 <code>table</code> 标签</p>

<pre><code>table {
    ...
}
table tr td {
    /* the default value of vertical-align is middle */
}
</code></pre>

<p>第二种方法，模拟 <code>table</code>标签，为居中元素添加 <code>vertical-align</code>标签</p>

<pre><code>.parent { 
    display: table;
}

.child {
    display: table-cell;
    vertical-align: middle;
}
</code></pre>

<blockquote>
<p>已知高度的 block</p>
</blockquote>

<pre><code>.parent {
    position: relative;
}

.child {
    position: absolute;
    top:50%;
    margin-top: - height/2;
    /* 偏移是以块的左上角为锚的，以此需减去 block 高度的一半 */
}
</code></pre>

<blockquote>
<p>未知高度的 block</p>
</blockquote>

<pre><code>.parent {
    position: relative;
}

.child {
    position: absolute;
    top:50%;
    transform: translateY(50%);
}
</code></pre>

<blockquote>
<p>大招，flex</p>
</blockquote>

<pre><code>.parent {
    display: flex;
    flex-direction: column;
    justify-content: center;
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css 命名约定]]></title>
    <link href="http://blog.kayorl.com/css-style.html"/>
    <updated>2017-03-22T14:24:54+08:00</updated>
    <id>http://blog.kayorl.com/css-style.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more --> 

<h2 id="toc_0">Object Oriented CSS (OOCSS)</h2>

<p>分离容器与内容</p>

<blockquote>
<p>别这么做啊！！！！</p>
</blockquote>

<pre><code>ul li.list-item {
    ...
}
</code></pre>

<blockquote>
<p>直接跳到元素</p>
</blockquote>

<pre><code>.list-item {
    ...
}
</code></pre>

<h2 id="toc_1"><del>Atomic CSS (ACSS)</del></h2>

<p>将每个元素拆分成原子</p>

<pre><code>.mt-20 {
    margin-top : 20px;
}

.fl {
    float : left;
}
</code></pre>

<h2 id="toc_2">Block, Element, Modifier (BEM)</h2>

<p>根据严规写出的，易于理解的 css 风格</p>

<pre><code>/* 块 */
.block {}

/* 块中元素，双下划线 */
.block__element {}

/* 元素或块的修改器，双连字符 */
.block--modifier {}
</code></pre>

<p>一个例子</p>

<pre><code>&lt;header class=&quot;col-header&quot;&gt;

    &lt;!-- 块元素 --&gt;
    &lt;h1 class=&quot;col-header__heading&quot;&gt;
        &lt;a class=&quot;col-header__link&quot; href=&quot;/&quot;&gt;clubmate.fi&lt;/a&gt;
    &lt;/h1&gt;

    &lt;!-- 块元素 --&gt;
    &lt;nav class=&quot;nav&quot;&gt;

        &lt;!-- 块元素 --&gt;
        &lt;a class=&quot;nav__item&quot; href=&quot;/&quot;&gt;Home&lt;/a&gt;

        &lt;!-- 元素与修改器 --&gt;
        &lt;a class=&quot;nav__item nav__item--uplink&quot; href=&quot;#header&quot;&gt;&amp;uarr;&lt;/a&gt;

    &lt;/nav&gt;
&lt;/header&gt;
</code></pre>

<hr/>

<p>BEM 是 OOCSS 的加强版，而且利于理解分辨，以后就采用这个啦~</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动端适配开发要点]]></title>
    <link href="http://blog.kayorl.com/mobile-notice.html"/>
    <updated>2017-03-19T10:12:40+08:00</updated>
    <id>http://blog.kayorl.com/mobile-notice.html</id>
    <content type="html"><![CDATA[
<p>参考<br/><br/>
<code>Alloyteam</code>  团队的<a href="http://alloyteam.github.io/Spirit/modules/Standard/">移动开发规范概述</a><br/>
<code>贤心博客</code>的<a href="http://sentsin.com/web/54.html">手机/移动前端开发需要注意的20个要点</a></p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">meta 标签设置</h2>

<pre><code>&lt;meta content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot; name=&quot;viewport&quot;&gt;
&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot;&gt;
&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot;&gt;
&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot;&gt;
</code></pre>

<table>
<thead>
<tr>
<th>name</th>
<th>description</th>
<th>值</th>
</tr>
</thead>

<tbody>
<tr>
<td>viewpoint</td>
<td>是否可以缩放Web页面</td>
<td>强制文档与设备的宽度保持1：1； 文档最大的宽度比列是1.0； user-scalable定义是否可缩放</td>
</tr>
<tr>
<td>apple-mobile-web-app-capable</td>
<td>iphone私有， 允许全屏模式浏览， 还可以添加至桌面</td>
<td> yes</td>
</tr>
<tr>
<td>apple-mobile-web-app-status-bar-style</td>
<td>iphone私有， safari顶端的状态条的样式</td>
<td>默认值为default（白色）， 可以设为black，black-translucent</td>
</tr>
<tr>
<td>format-detection</td>
<td>格式检测</td>
<td>默认全开启， telephone=yes email=yes address=yes(跳转到地图)</td>
</tr>
</tbody>
</table>

<h2 id="toc_1">字体设置</h2>

<p>使用无衬线体<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>. <br/>
表单元素会被浏览器代理样式所覆盖，因此需让表单元素继承字体属性<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup></p>

<pre><code>body {
    font-family: &quot;Helvetica Neue&quot;, Helvetica, STHeiTi, sans-serif;
}
input, label, select, option, textarea, button, fieldset, legend {
    font-family: inherit;
}
</code></pre>

<p>各操作系统所用字体如下</p>

<table>
<thead>
<tr>
<th>OS 版本</th>
<th style="text-align: center">语言</th>
<th style="text-align: center">字体</th>
</tr>
</thead>

<tbody>
<tr>
<td>&gt; iOS 4.0</td>
<td style="text-align: center">英文</td>
<td style="text-align: center">Helvetica Neue</td>
</tr>
<tr>
<td></td>
<td style="text-align: center">中文</td>
<td style="text-align: center">STHeiTi<sup id="fnref3"><a href="#fn3" rel="footnote">3</a></sup></td>
</tr>
<tr>
<td>&gt; Android 4.0</td>
<td style="text-align: center">中文/英文</td>
<td style="text-align: center">Roboto</td>
</tr>
<tr>
<td>&lt; iOS 4.0</td>
<td style="text-align: center">英文</td>
<td style="text-align: center">Helvetica</td>
</tr>
<tr>
<td>&lt; Android 4.0</td>
<td style="text-align: center">英文</td>
<td style="text-align: center">Droid Sans</td>
</tr>
<tr>
<td></td>
<td style="text-align: center">中文</td>
<td style="text-align: center">Droid Sans Fallback</td>
</tr>
</tbody>
</table>

<h2 id="toc_2">基础交互</h2>

<p>设置全局的CSS样式，<br/>
避免图中的长按 <em>弹出菜单与选中文本</em> 的行为</p>

<pre><code>a, img {
    -webkit-touch-callout: none; /* 禁止长按链接与图片弹出菜单 */
}
html, body {
    -webkit-user-select: none;   /* 禁止选中文本（如无文本选中需求，此为必选项） */
    user-select: none;
}
</code></pre>

<div class="footnotes">
<hr/>
<ol>

<li id="fn1">
<p>无衬线体（Sans-serif）专指西文中没有衬线的字体，与汉字字体中的黑体相对应。与衬线字体相反，该类字体通常是机械的和统一线条的，它们往往拥有相同的曲率，笔直的线条，锐利的转角。&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn2">
<p><img src="media/14898895604273/table-style-hover.png" alt="table-style-hove set-up" style="width:300px;"/>&nbsp;<a href="#fnref2" rev="footnote">&#8617;</a></p>
</li>

<li id="fn3">
<p>华文黑体并不存在iOS的字体库中(<a href="http://support.apple.com/kb/HT5878)%EF%BC%8C">http://support.apple.com/kb/HT5878)，</a> 但系统会自动将华文黑体 <code>STHeiTi</code> 兼容命中系统默认中文字体<code>黑体-简</code>或<code>黑体-繁</code>&nbsp;<a href="#fnref3" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对象属性的特征值]]></title>
    <link href="http://blog.kayorl.com/character.html"/>
    <updated>2017-03-15T14:37:18+08:00</updated>
    <id>http://blog.kayorl.com/character.html</id>
    <content type="html"><![CDATA[
<pre><code>Uncaught TypeError: Cannot redefine property: name
</code></pre>

<p>这里讨论的，是对象属性的特征值。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">数据属性</h2>

<table>
<thead>
<tr>
<th style="text-align: center">属性特征</th>
<th style="text-align: center">意义</th>
<th style="text-align: center">默认值</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">[[Configurable]]</td>
<td style="text-align: center">能否通过 delete 删除属性从而重新定义属性</td>
<td style="text-align: center">字面量定义时，true</td>
</tr>
<tr>
<td style="text-align: center">[[Enumerable]]</td>
<td style="text-align: center">能否通过 for-in 循环返回属性</td>
<td style="text-align: center">字面量定义时，true</td>
</tr>
<tr>
<td style="text-align: center">[[Writable]]</td>
<td style="text-align: center">表示能否修改属性的值</td>
<td style="text-align: center">字面量定义时，true</td>
</tr>
<tr>
<td style="text-align: center">[[Value]]</td>
<td style="text-align: center">包含这个属性的数据值</td>
<td style="text-align: center"> undefined</td>
</tr>
</tbody>
</table>

<pre><code class="language-js">var person = {};


/* 测试[[ Value ]] ，[[ Value ]]特性被设置为&quot;kayor&quot; */
Object.defineProperty(person,&quot;name&quot;,{
    configurable : false,
    writable : false,
    value : &quot;kayor&quot;         
});


/* 测试 [[ Writable ]]，写入 name 属性 无效 */
alert( person.name );       // &quot;kayor&quot;
person.name= &quot;k&quot;;           
alert( person.name );       // &quot;kayor&quot;


/* 测试 [[ Configurable ]] ，无法修改 name 属性的特性 */
// Uncaught TypeError: Cannot redefine property
Object.defineProperty(person,&quot;name&quot;,{
    configurable : true,    
    value : &quot;kayor&quot; 

});

</code></pre>

<h2 id="toc_1">访问器属性</h2>

<p>访问器属性不包含数据值， 只有 getter 和 setter 函数。<br/>
访问器属性不能直接定义，必须使用 <code>Object.defineProperty(){}</code> 定义</p>

<pre><code class="language-js">var book = {
    _year : 2004,       //下划线表示 只能通过对象方法访问的属性
    edition: 1
};


Object.defineProperty(book, &quot;year&quot;, {
    get : function() {
        return this._year;
    },
    set : function(newValue) {
    
        if(newValue &gt; 2016 ) {
            this._year= newValue;
            this.edition += newValue - 2016;
        }
    }
});
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css 标签一行化]]></title>
    <link href="http://blog.kayorl.com/14892446837739.html"/>
    <updated>2017-03-11T23:04:43+08:00</updated>
    <id>http://blog.kayorl.com/14892446837739.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">box-shadow</a>
</li>
<li>
<a href="#toc_1">font</a>
</li>
<li>
<a href="#toc_2">border-box,减去边框与内边距后的盒模型</a>
</li>
<li>
<a href="#toc_3">list-style, 表项之项头标记</a>
</li>
<li>
<a href="#toc_4">background，多行太烦不如一行</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">box-shadow</h2>

<table>
<thead>
<tr>
<th>类型</th>
<th>属性</th>
</tr>
</thead>

<tbody>
<tr>
<td>h-shadow</td>
<td>水平阴影的位置。允许负值。</td>
</tr>
<tr>
<td>v-shadow</td>
<td>垂直阴影的位置。允许负值。</td>
</tr>
<tr>
<td>blur</td>
<td>模糊距离。</td>
</tr>
<tr>
<td>spread</td>
<td>阴影的尺寸。</td>
</tr>
<tr>
<td>color</td>
<td>阴影的颜色。</td>
</tr>
</tbody>
</table>

<h2 id="toc_1">font</h2>

<table>
<thead>
<tr>
<th>类型</th>
<th>属性</th>
<th>取值</th>
</tr>
</thead>

<tbody>
<tr>
<td>样式</td>
<td>font-style</td>
<td>normal<br>italic,斜体<br>oblique，倾斜</td>
</tr>
<tr>
<td>异体</td>
<td>font-variant</td>
<td>normal <br>small-caps,小型大写字母</td>
</tr>
<tr>
<td>粗细</td>
<td>font-weight</td>
<td>normal(400) <br>bold(700),bolder<br>lighter<br>100,200...</td>
</tr>
<tr>
<td>尺寸</td>
<td>font-size/line-height</td>
<td>medium<br>small,x-small,<br>xx-small<br>large,x-large,xx-large</td>
</tr>
<tr>
<td>系列</td>
<td>font-family</td>
<td>...</td>
</tr>
</tbody>
</table>

<h2 id="toc_2">border-box,减去边框与内边距后的盒模型</h2>

<p>为元素指定的任何内边距和边框都将在 <u>已设定的宽度和高度</u> 内进行绘制;<br/>
已设定的宽度和高度分别 <u>减去边框和内边距</u> 得到内容的宽度和高度。</p>

<pre><code>box-sizing: border-box;
</code></pre>

<h2 id="toc_3">list-style, 表项之项头标记</h2>

<p>设置列表样式</p>

<table>
<thead>
<tr>
<th style="text-align: center">值</th>
<th style="text-align: left">描述</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center"> list-style-type</td>
<td style="text-align: left">标记类型，如三角形，方形等</td>
</tr>
<tr>
<td style="text-align: center">list-style-position</td>
<td style="text-align: left">标记位置，有 inside，outside. <br>inside 将标记当成普通内容; outside 在标记之后 <u><strong>再</strong></u> 缩进</td>
</tr>
<tr>
<td style="text-align: center"> list-style-image</td>
<td style="text-align: left">标记图片</td>
</tr>
</tbody>
</table>

<pre><code>ul{
    list-style:square inside url(&#39;/i/arrow.gif&#39;);
}
</code></pre>

<h2 id="toc_4">background，多行太烦不如一行</h2>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>

<tbody>
<tr>
<td> scroll</td>
<td>default，页面其余部分滚动，背景图像也移动</td>
</tr>
<tr>
<td> fixed</td>
<td>背景图像不动</td>
</tr>
</tbody>
</table>

<pre><code>body{ 
    background: #ff0000 url(/i/bg.gif) no-repeat fixed center; 
}
</code></pre>

<table>
<thead>
<tr>
<th style="text-align: left">描述</th>
<th style="text-align: left">background-</th>
<th style="text-align: left">取值</th>
<th style="text-align: left">注意</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">颜色</td>
<td style="text-align: left">color</td>
<td style="text-align: left">...</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">位置</td>
<td style="text-align: left">position</td>
<td style="text-align: left">x% y%  top left</td>
<td style="text-align: left"></td>
</tr>
<tr>
<td style="text-align: left">尺寸</td>
<td style="text-align: left">size</td>
<td style="text-align: left">x,y , cover, contain</td>
<td style="text-align: left">cover: 把背景图像扩展至完全覆盖背景区域,只显示 <u><strong>部分</strong></u> contain:把图像图像扩展至完全适应内容区域。</td>
</tr>
<tr>
<td style="text-align: left">重复</td>
<td style="text-align: left">repeat</td>
<td style="text-align: left">no-repeat repeat-x repeat</td>
<td style="text-align: left">默认 xy 轴都重复</td>
</tr>
<tr>
<td style="text-align: left">定位区域</td>
<td style="text-align: left">origin</td>
<td style="text-align: left">padding-box border-box content-box</td>
<td style="text-align: left">默认 padding-box 规定 <u>position 的原点</u></td>
</tr>
<tr>
<td style="text-align: left">绘制区域</td>
<td style="text-align: left">clip</td>
<td style="text-align: left">同上</td>
<td style="text-align: left">默认 border-box 规定 <u>绘制的区域</u></td>
</tr>
<tr>
<td style="text-align: left">固定或滚动</td>
<td style="text-align: left">attachment</td>
<td style="text-align: left">scroll fixed</td>
<td style="text-align: left">默认 scroll <br>scroll: 背景图像随页面滚动而移动<br>设置为 fixed 才能在 Firefox 与 Opera 中工作</td>
</tr>
<tr>
<td style="text-align: left">背景图</td>
<td style="text-align: left">image</td>
<td style="text-align: left">none url</td>
<td style="text-align: left"></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[function 背后隐藏着什么秘密]]></title>
    <link href="http://blog.kayorl.com/function.html"/>
    <updated>2017-03-08T14:37:21+08:00</updated>
    <id>http://blog.kayorl.com/function.html</id>
    <content type="html"><![CDATA[
<p><del>恩，对象肯定是按引用传递的</del></p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">所有函数的参数都是按值传递的，包括对象</h2>

<p>局部作用域中修改的 <strong>对象</strong> 会在全局作用域中体现出来, <u>并无法说明参数是按引用传递的</u>;</p>

<p>做一番假设：如果是按值传递的话，那么下面代码打印结果应该是 alien </p>

<pre><code class="language-js">function setName(obj){
    obj.name = &quot;cowboy&quot;; // 参数值被修改，原始引用不变
    obj= new Object();   // obj 被重写后引用的是局部对象了，并不是传入的 person
    obj.name = &quot;alien&quot;;
} // 执行完后的 obj 会被销毁

var person = new Object();
setName( person );
alert( person.name );    // &quot;cowboy&quot;
</code></pre>

<p>但实际结果是 cowboy，说明</p>

<blockquote>
<p>对象不是按引用传递的。</p>
</blockquote>

<h2 id="toc_1">函数内部对象及函数方法</h2>

<table>
<thead>
<tr>
<th style="text-align: center">类别</th>
<th style="text-align: center">名称</th>
<th style="text-align: center">意义</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center"> 内部对象</td>
<td style="text-align: center">  arguments</td>
<td style="text-align: center">该对象有属性 callee 指向函数本身，<del>严格模式下调用 callee 会导致错误</del></td>
</tr>
<tr>
<td style="text-align: center"> 内部对象</td>
<td style="text-align: center">this</td>
<td style="text-align: center">指向环境对象</td>
</tr>
<tr>
<td style="text-align: center">属性</td>
<td style="text-align: center">length</td>
<td style="text-align: center"> 函数希望接收的命名参数的个数</td>
</tr>
<tr>
<td style="text-align: center">属性</td>
<td style="text-align: center"> prototype</td>
<td style="text-align: center">保存所有实例方法</td>
</tr>
<tr>
<td style="text-align: center">方法</td>
<td style="text-align: center"> <code>apply(scope, array)</code></td>
<td style="text-align: center">设置函数体内 this 对象的值，扩充函数运行的作用域</td>
</tr>
<tr>
<td style="text-align: center">方法</td>
<td style="text-align: center"><code>call(scope, arg1,arg2,..)</code></td>
<td style="text-align: center">设置函数体内 this 对象的值，扩充函数运行的作用域</td>
</tr>
<tr>
<td style="text-align: center">方法(ES5)</td>
<td style="text-align: center"><code>bind(scope)</code></td>
<td style="text-align: center">创建一个函数的实例</td>
</tr>
</tbody>
</table>

<pre><code class="language-js">// arguments.callee
function factorial(num) {
    if( num &lt;= 1 ) {
        return 1;
    }else{
        return arguments.callee(num-1); // 解耦，改变函数名时不用都改变
    }
}

// .length
alert(factorial.length); //希望接收参数数量为1
</code></pre>

<blockquote>
<p>利用 <code>apply()</code> 与 <code>call()</code>  可以将对象与方法解耦</p>
</blockquote>

<pre><code class="language-js">// 扩充函数运行作用域
window.color = &quot;red&quot; ; 
var o = { color: &quot;blue&quot;};

function sayColor(){ alert(this.color); }

sayColor();             //red
sayColor.call(this);    //red
sayColor.call(window);  //red
sayColor.call(o);       //blue

var objectSayColor = sayColor.bind(o);
objectSayColor();       //blue
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css 布局系统]]></title>
    <link href="http://blog.kayorl.com/css-layout.html"/>
    <updated>2017-03-04T09:49:29+08:00</updated>
    <id>http://blog.kayorl.com/css-layout.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">grid</a>
</li>
<li>
<a href="#toc_1">flexbox</a>
</li>
<li>
<a href="#toc_2">column</a>
</li>
<li>
<a href="#toc_3">inline-block</a>
</li>
<li>
<a href="#toc_4">float</a>
<ul>
<li>
<a href="#toc_5">overflow 技巧</a>
</li>
<li>
<a href="#toc_6">clearfix 技巧</a>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">grid</h2>

<pre><code>/*------------------------------*\
    Grid System
\*------------------------------*/


/* reseting the box model */

.row,
.column {
    box-sizing: border-box;
}


/* clearing floats */

.row:before,
.row:after {
    content: &quot;&quot;;
    display: table;
}

.row:after {
    clear: both;
}


/* defining columns, common style
 * float left will cause the element to become display:block 
 */

.column {
    position: relative;
    float: left;
}


/* creating gutters */

.column + .column {
    margin-left: 1.6%;
}


/* calculating column widths , 12columns
 * 去除12列之间的 沟(gutter) 后的单列宽
 * 1 column width = (100 - (margin * (maximum columns - 1)))/ maximum columns
 *                = (100 - (1.6 * ( 12 - 1 ) )) / 12 
 *                = 6.86666666667
 *
 * 多列自动合并中间的 沟宽
 * n column width = (1 column width * column span ) + (margin *  (column span -1) ))                  
 * 2 column width = (6.86666666667 * 2) +  (1.6 * (2 - 1))
 *              
 */


/* 12 columns */

.column-1 {
    width: 6.86666666667%;
}

.column-2 {
    width: 15.3333333333%;
}

.column-3 {
    width: 23.8%;
}

.column-4 {
    width: 32.2666666667%;
}

.column-5 {
    width: 40.7333333333%;
}

.column-6 {
    width: 49.2%;
}

.column-7 {
    width: 57.6666666667%;
}

.column-8 {
    width: 66.1333333333%;
}

.column-9 {
    width: 74.6%;
}

.column-10 {
    width: 83.0666666667%;
}

.column-11 {
    width: 91.5333333333%;
}

.column-12 {
    width: 100%;
}

@media only screen and (max-width: 550px) {
    .column-1,
    .column-2,
    .column-3,
    .column-4,
    .column-5,
    .column-6,
    .column-7,
    .column-8,
    .column-9,
    .column-10,
    .column-11,
    .column-12 {
        width: auto;
        float: none;
    }
    .column + .column {
        margin-left: 0;
    }
}

</code></pre>

<h2 id="toc_1"><a href="http://www.w3cplus.com/css3/flexbox-basics.html">flexbox</a></h2>

<p>flex 的容器属性</p>

<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>

<tbody>
<tr>
<td>[flex-flow]</td>
<td>[flex-direction],[flex-wrap]</td>
<td>方向与换行</td>
</tr>
<tr>
<td>[flex-direction]</td>
<td>row / row-reverse<br>column / column-reverse</td>
<td>方向</td>
</tr>
<tr>
<td>[flex-wrap]</td>
<td>no-wrap / wrap <br> wrap-reverse</td>
<td>换行</td>
</tr>
<tr>
<td>[align-items]</td>
<td>flex-start/baseline <br> flex-end<br> center <br>stretch</td>
<td>侧轴对齐方式</td>
</tr>
<tr>
<td>[justify-content]</td>
<td>flex-start / flex-end <br>center <br>space-between <br>space-around</td>
<td>伸缩项分布方式</td>
</tr>
<tr>
<td>[align-content]</td>
<td>flex-start / flex-end <br>center<br> space-between<br> space-around <br>stretch</td>
<td>伸缩项对齐方式</td>
</tr>
</tbody>
</table>

<pre><code>.container {
  display: -webkit-flex;
  display: flex;
  flex-flow: row wrap;
}

/* 最大200px，最小100px */
.initial {
  -webkit-flex: initial;
          flex: initial;
  width: 200px;
  min-width: 100px;
}

/*  固定200px */
.none {
  -webkit-flex: none;
          flex: none;
  width: 200px;
}

/* 占据剩余宽度的 1/flex(n) */
.flex1 {
  -webkit-flex: 1;
          flex: 1;
}

/* 占据剩余宽度的 2/flex(n) */
.flex2 {
  -webkit-flex: 2;
          flex: 2;
}
</code></pre>

<h2 id="toc_2">column</h2>

<p>内容多列显示</p>

<pre><code>.three-column {
  padding: 1em;
  -moz-column-count: 3;
  -moz-column-gap: 1em;
  -webkit-column-count: 3;
  -webkit-column-gap: 1em;
  column-count: 3;
  column-gap: 1em;
}
</code></pre>

<h2 id="toc_3"><a href="http://zh.learnlayout.com/inline-block-layout.html">inline-block</a></h2>

<p>可以用 inline-block 来布局，但需要记住<br/>
* <code>vertical-align</code>  会影响 <code>inline-block</code> 元素, 可能会设置为<code>top</code><br/>
* 需要设置每一列的宽度<br/>
* 如果元素之间有空格，列之间会产生空隙</p>

<blockquote>
<p>the default vertical-align value on inline or inline-block element is <u>baseline</u> , which means the element’s baseline will be aligned with its parent’s baseline.</p>
</blockquote>

<p><img src="media/14885921690264/baseline-inline-block.jpg" alt="baseline-inline-block"/></p>

<h2 id="toc_4">float</h2>

<h3 id="toc_5">overflow 技巧</h3>

<p>在包含浮动元素的父容器中设置“overflow”的属性值为“auto”，这样父容器就会有一个高度存在。</p>

<pre><code>.box {
    overflow : auto;
    zoom: 1;    /* 支持 ie 6 */
}
</code></pre>

<ol>
<li>元素想移动到父容器外面会被截断，如 盒子阴影和下拉菜单</li>
<li>不同的浏览器对“overflow”属性解析不一样，在浏览器的显示风格也不一样</li>
</ol>

<h3 id="toc_6">clearfix 技巧</h3>

<p>使用<code>&quot;display : tabel&quot;</code>创建一个匿名的<code>&quot;tabel-cell&quot;</code>元素<br/>
在父元素上使用 <code>&quot;:before&quot;</code>伪类，使得父容器顶部创建了一个隐藏元素，防止子元素的顶部外边距塌陷。<br/>
在父元素上使用<code>&quot;:after&quot;</code>伪类,可以在父容器底部创建隐藏元素，防止子元素的底部外边距塌陷与清除元素浮动。</p>

<pre><code class="language-css">/*-- our cleafix hack -- */ 
.row:before, 
.row:after {
    content: &quot;&quot; ;
    display: table ;
    clear: both ;
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 数据类型 之 性格]]></title>
    <link href="http://blog.kayorl.com/datatype.html"/>
    <updated>2017-02-16T20:05:35+08:00</updated>
    <id>http://blog.kayorl.com/datatype.html</id>
    <content type="html"><![CDATA[
<p>学会数据类型，防止自己挖坑自己跳 (￣o￣) . z Z</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">Undefined 类型，只有一个值 undefined</h2>

<ol>
<li>声明，但不赋值变量，默认值为 undefined</li>
<li>不声明，直接操作变量， <u>不会有默认值</u></li>
<li>奇怪的是 typeof 操作符都返回 undefined</li>
</ol>

<pre><code>var msg;
alert (msg == undefiend);   // true
alert (age == undefined);   // ERROR!

alert (typeof undefined);   // undefined
alert (typeof undefined);   // undefined
</code></pre>

<h2 id="toc_1">Null 类型, 只有一个值 null</h2>

<ol>
<li>null 表示一个空对象指针 </li>
<li>用 typeof 检测时会返回 <u>object</u>.</li>
<li>如果变量以后要保存对象，那么初始化为 null 会更好</li>
</ol>

<pre><code>alert (typeof null);    // object

if ( car ! = null ) {
    //对 car 对象进行操作
}
</code></pre>

<h2 id="toc_2">Number 类型</h2>

<ol>
<li>浮点运算会产生误差，不要测定特定的浮点数值</li>
<li>无穷值用 <code>isFinite()</code> 检查</li>
<li>范围数值的操作数未返回数值，用 NaN 表示，用 <code>isNaN()</code> 检查</li>
</ol>

<table>
<thead>
<tr>
<th style="text-align: center"></th>
<th style="text-align: center">“hello&quot;</th>
<th style="text-align: center">undefined</th>
<th style="text-align: center">null</th>
<th style="text-align: center">“”</th>
<th style="text-align: center">true</th>
<th style="text-align: center">“000011&quot;</th>
<th style="text-align: center">22.5</th>
<th style="text-align: center">22.5.5</th>
<th style="text-align: center">1234hdhd</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">Number()</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">0</td>
<td style="text-align: center">0</td>
<td style="text-align: center">1</td>
<td style="text-align: center">11</td>
<td style="text-align: center">22.5</td>
<td style="text-align: center">ERROR</td>
<td style="text-align: center">ERROR</td>
</tr>
<tr>
<td style="text-align: center">parseInt(obj,base)</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">11</td>
<td style="text-align: center">22</td>
<td style="text-align: center">22</td>
<td style="text-align: center">1234</td>
</tr>
<tr>
<td style="text-align: center">parseFloat()</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">NaN</td>
<td style="text-align: center">11</td>
<td style="text-align: center">22.5</td>
<td style="text-align: center">22.5</td>
<td style="text-align: center">1234</td>
</tr>
</tbody>
</table>

<h2 id="toc_3">String 类型，值不变</h2>

<ol>
<li>确定值不为 null 或 undefined 时直接用 <code>toString()</code> 方法</li>
<li>null 与 undefined 无 <code>toString()</code> 方法</li>
<li>调用 <code>String()</code> 方法,可以将任意值转换为字符串 (个人觉得为了安全还是不要的好)</li>
<li>
```js</li>
</ol>

<p>function String(obj){<br/>
    if(typeof obj.toString() === &quot;function&quot;) {<br/>
        return obj.toString();      // 方法<br/>
    }<br/>
    if(obj === null) {<br/>
        return &quot;null&quot;;<br/>
    }<br/>
    if(typeof obj === undefined) {<br/>
        return &quot;undefined&quot;;<br/>
    }<br/>
}<br/>
```</p>

<h2 id="toc_4">Object 类型</h2>

<table>
<thead>
<tr>
<th style="text-align: left">方法</th>
<th style="text-align: left">描述</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">constructor</td>
<td style="text-align: left">构造函数</td>
</tr>
<tr>
<td style="text-align: left">hasOwnProperty(propertyName)</td>
<td style="text-align: left">检查属性是否存在当前对象实例中</td>
</tr>
<tr>
<td style="text-align: left">isPrototypeOf(object)</td>
<td style="text-align: left">检查传入对象是否为当前对象的原型</td>
</tr>
<tr>
<td style="text-align: left">toLocalString()</td>
<td style="text-align: left">返还执行环境地区的字符串</td>
</tr>
<tr>
<td style="text-align: left">toString()</td>
<td style="text-align: left">返回字符串表示</td>
</tr>
<tr>
<td style="text-align: left">valueOf()</td>
<td style="text-align: left">返回字符串、数值或布尔值表示</td>
</tr>
</tbody>
</table>

<blockquote>
<p>内置函数和操作符的操作流程</p>
</blockquote>

<pre><code class="language-js">if( !obj.valueOf().func() ){
    return ...;
}else{
    if( ! obj.toString().func() ) {
        return ...;
    }else {
        return ...;
    }
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html 文档的解析，及 script 标签位置的选择]]></title>
    <link href="http://blog.kayorl.com/html-decode.html"/>
    <updated>2017-02-16T20:05:35+08:00</updated>
    <id>http://blog.kayorl.com/html-decode.html</id>
    <content type="html"><![CDATA[
<p>读 《JavaScript高级程序设计》时，对 html 的标签解析感到模糊，参考了博文，根据理解画了以下的解析流程图，有误请指教哈~</p>

<span id="more"></span><!-- more -->

<p><img src="http://olh3adg9x.bkt.clouddn.com/decode_html.png" alt="decode_htm"/></p>

<p>浏览器对非延迟执行的脚本都是立即执行的，导致浏览器呈现内容的速度变慢（即页面空白的时间过久），造成不好的用户体验。</p>

<blockquote>
<p>因此把所有脚本放到<code>&lt;body&gt;</code>元素的最后面</p>
</blockquote>

<p>有人说，全用 defer 脚本不就好了吗？  <strong><em>人无完人，defer 也有限制</em></strong></p>

<blockquote>
<p>延迟脚本直到 <code>&lt;/html&gt;</code> 标签解析完后加载;<br/>
<u>只有一个</u> 延迟脚本能按顺序执行;<br/>
只适用于外部脚本文件</p>
</blockquote>

<p>async 异步呢？其存在的目的是 <strong><em>不让页面等待两个脚本下载和执行</em></strong></p>

<blockquote>
<p>不保证先后顺序<br/>
只适用于外部脚本文件</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解 DOCTYPE 声明的意义]]></title>
    <link href="http://blog.kayorl.com/doctype.html"/>
    <updated>2017-03-08T10:01:30+08:00</updated>
    <id>http://blog.kayorl.com/doctype.html</id>
    <content type="html"><![CDATA[
<p>每次看到 html 文档时，已经习惯了头部有个 <code>&lt;!DOCTYPE html&gt;</code>，印象也有些模糊，趁着学习 css ，赶紧整理一下</p>

<span id="more"></span><!-- more -->

<p>文档类型中会出现的元素限制。</p>

<h2 id="toc_0">DOCTYPE 声明对页面进行有效性验证</h2>

<blockquote>
<p>DTD (Document Type Definition, 文档定义类型)定义 XML 或 HTML 的特定版本允许有什么，不允许有什么。</p>

<p>SGML (Standard Generalized Markup language, 标准通用标记语言) 是一种定义电子文档结构和描述其内容的国际标准语言</p>
</blockquote>

<p>利用 <a href="http://validator.w3.org/">w3c 认证器</a>, 有助于找到代码中的 bug 。<br/>
它是通过与标准HTML规则进行比较的方式，分析HTML文档、标记出错误和非标准代码的处理过程。<br/>
Web页面使用HTML进行渲染，而HTML本身采用了HTML规范作为其规则和标准。</p>

<h2 id="toc_1">DOCTYPE 声明让浏览器有不同的呈现形式</h2>

<blockquote>
<p>标准模式(standard mode)：根据规范的一种呈现形式<br/>
混杂模式(quirk mode)：模拟老式浏览器的一种呈现形式，盒模型（border-box）</p>
</blockquote>

<table>
<thead>
<tr>
<th style="text-align: center"></th>
<th style="text-align: center">DTD</th>
<th style="text-align: center">standard</th>
<th style="text-align: center">quirk</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">NO</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center">yes</td>
</tr>
<tr>
<td style="text-align: center"> HTML4.01</td>
<td style="text-align: center">strict</td>
<td style="text-align: center">yes</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Transitional &amp;&amp; url</td>
<td style="text-align: center">yes</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center"></td>
<td style="text-align: center">Transitional &amp;&amp; NO url</td>
<td style="text-align: center"></td>
<td style="text-align: center">yes</td>
</tr>
<tr>
<td style="text-align: center">HTML5</td>
<td style="text-align: center"> 不基于 SGML，所以不需要引用 DTD</td>
<td style="text-align: center">yes</td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

<p>三、严格模式与混杂模式的语句解析不同点有哪些？</p>

<ol>
<li>盒模型的高宽包含内边距padding和边框border
在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在IE5.5及以下的浏览器及其他版本的Quirks模式下，IE的宽度和高度还包含了padding和border。</li>
<li>可以设置行内元素的高宽
在Standards模式下，给span等行内元素设置width和height都不会生效，而在quirks模式下，则会生效。</li>
<li>可设置百分比的高度
在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。</li>
<li>用margin:0 auto设置水平居中在IE下会失效
使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效,quirk模式下的解决办法，用text-align属性:   <code>body{text-align :center};#content{text-align :left}</code></li>
<li>quirk模式下设置图片的padding会失效</li>
<li>quirk模式下Table中的字体属性不能继承上层的设置</li>
<li>quirk模式下<code>white-space: pre</code>会失效</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 语句]]></title>
    <link href="http://blog.kayorl.com/14872445826285.html"/>
    <updated>2017-02-16T19:29:42+08:00</updated>
    <id>http://blog.kayorl.com/14872445826285.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">存储创建时间和最后修改时间</h2>

<pre><code class="language-sql">CREATE TABLE t1
(
    tb_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ts_modifiled TIMESTAMP DEFAULT CURRNET_TIMESTAMP
                            ON UPDATE CURRENT_TIMESTAMP,
    ...
):
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL5.7 从相见到👋]]></title>
    <link href="http://blog.kayorl.com/14872339187000.html"/>
    <updated>2017-02-16T16:31:58+08:00</updated>
    <id>http://blog.kayorl.com/14872339187000.html</id>
    <content type="html"><![CDATA[
<p>我的意中人是个盖世英雄<br/>
有一天他会踩着七色云彩来娶我<br/>
我猜中了前头,<br/>
可是我猜不着这结局</p>

<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">安装</a>
</li>
<li>
<a href="#toc_1">建立与 MySQL 服务器的连接</a>
</li>
<li>
<a href="#toc_2">导入 .sql 文件</a>
</li>
<li>
<a href="#toc_3">修改时区</a>
</li>
<li>
<a href="#toc_4">备份</a>
</li>
<li>
<a href="#toc_5">卸载</a>
</li>
</ul>


<h2 id="toc_0">安装</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04">DO教程</a></p>

<pre><code># 安装 
$ sudo apt-get update
$ sudo apt-get install mysql-server

# 修改数据库的安全配置，如禁用远程 root 用户
$ sudo mysql_secure_installation

## 测试数据库状态
$ systemctl status mysql.service
</code></pre>

<h2 id="toc_1">建立与 MySQL 服务器的连接</h2>

<p>为连接到 MySQL 服务器,在命令行中调用 mysql 程序</p>

<pre><code>$ mysql -h host_name -p -u user_name -D database_name
</code></pre>

<ul>
<li><code>mysql</code> 是必须的, 其他可选</li>
<li>-h  host_name　　　主机地址,默认为本地</li>
<li>-u  user_name　　　MySQL 用户名</li>
<li>-p　　　　　　　　回显 Enter password: ，如果相应用户名有密码而没加此项，会显示<code>拒绝访问</code></li>
<li>-D  database_name 选择操作(默认)的数据库<br/></li>
</ul>

<h2 id="toc_2">导入 .sql 文件</h2>

<p>可以将编写好的数据库语句写入到文件名后缀为 <code>.sql</code> 的文件中,并记住其路径,最简单的方法是在命令行中进入到.sql 文件所在的目录,然后在<code>命令行</code>执行以下命令(省略了主机名,用户,密码等参数)</p>

<pre><code>$ mysql sampdb &lt; create_member.sql
</code></pre>

<p>如果已经进入 mysql 程序界面,则执行</p>

<pre><code>mysql&gt; source create_member.sql;
</code></pre>

<h2 id="toc_3">修改时区</h2>

<pre><code># /etc/my.cnf

[mysqld]
...
default-time-zone = &#39;+8:00&#39;

$ systemctl restart mysql
</code></pre>

<h2 id="toc_4">备份</h2>

<pre><code>$ mysqldump -u -p -D exampleDB &gt;my.sql
</code></pre>

<h2 id="toc_5">卸载</h2>

<p>purge,翻译过来是净化的意思</p>

<pre><code>sudo apt-get remove --purge mysql*
sudo apt-get autoremove
sudo apt-get autoclean
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(6) sequelize-cli，出门必备良品]]></title>
    <link href="http://blog.kayorl.com/14872470138156.html"/>
    <updated>2017-02-16T20:10:13+08:00</updated>
    <id>http://blog.kayorl.com/14872470138156.html</id>
    <content type="html"><![CDATA[
<p>让数据库转移到那些年的状态<br/>
通过<strong>迁移文件</strong>存储数据库不同时期的状态，每个迁移文件描述了对数据库的操作</p>

<span id="more"></span><!-- more -->

<p><strong>CLI</strong>:  <code>command-line interface</code> , 命令行界面</p>

<h2 id="toc_0">全局安装</h2>

<pre><code>$ npm install -g sequelize-cli
</code></pre>

<h3 id="toc_1">使用</h3>

<pre><code>$ sequelize
</code></pre>

<p>迁移文件一般长这样</p>

<blockquote>
<p>queryInterface : 修改数据库</p>

<p>Sequelize : 提供多种类型</p>
</blockquote>

<pre><code class="language-js">module.exports = {
  up: function(queryInterface, Sequelize) {
    // logic for transforming into the new state
  },
 
  down: function(queryInterface, Sequelize) {
    // logic for reverting the changes
  }
}
</code></pre>

<p>queryInterface有一下几个函数（常用）：</p>

<ul>
<li>createTable(tableName, attributes, options)</li>
<li>addIndex(tableName, attributes, options)</li>
<li>dropTable(tableName, options)</li>
</ul>

<h2 id="toc_2">createTable(tableName, attributes, options)</h2>

<pre><code>queryInterface.createTable(
  &#39;nameOfTheNewTable&#39;,
  {
    id: {
      type: Sequelize.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    createdAt: {
      type: Sequelize.DATE
    },
    updatedAt: {
      type: Sequelize.DATE
    },
    attr1: Sequelize.STRING,
    attr2: Sequelize.INTEGER,
    attr3: {
      type: Sequelize.BOOLEAN,
      defaultValue: false,
      allowNull: false
    },
    //foreign key usage
    attr4: {
        type: Sequelize.INTEGER,
        references: {
            model: &#39;another_table_name&#39;,
            key: &#39;id&#39;
        },
        onUpdate: &#39;cascade&#39;,
        onDelete: &#39;cascade&#39;
    }
  },
  {
    engine: &#39;MYISAM&#39;,                     // default: &#39;InnoDB&#39;
    charset: &#39;utf8&#39;,                    // default: null
    schema: &#39;public&#39;                      // default: public, PostgreSQL only.
  }
)
</code></pre>

<h2 id="toc_3">addIndex(tableName, attributes, options)</h2>

<pre><code class="language-js">// This example will create the index person_firstname_lastname
queryInterface.addIndex(&#39;Person&#39;, [&#39;firstname&#39;, &#39;lastname&#39;])



// This example will create a unique index with the name SuperDuperIndex using the optional &#39;options&#39; field.
// Possible options:
// - indicesType: UNIQUE|FULLTEXT|SPATIAL
// - indexName: The name of the index. Default is __
// - parser: For FULLTEXT columns set your parser
// - indexType: Set a type for the index, e.g. BTREE. See the documentation of the used dialect
// - logging: A function that receives the sql query, e.g. console.log
queryInterface.addIndex(
  &#39;Person&#39;,
  [&#39;firstname&#39;, &#39;lastname&#39;],
  {
    indexName: &#39;SuperDuperIndex&#39;,
    indicesType: &#39;UNIQUE&#39;
  }
)
</code></pre>

<h2 id="toc_4">dropTable(tableName, options)</h2>

<pre><code>queryInterface.dropTable(&#39;nameOfTheExistingTable&#39;)
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(5) 几对几]]></title>
    <link href="http://blog.kayorl.com/14872314142796.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142796.html</id>
    <content type="html"><![CDATA[
<p>一对一，一对多，多对多</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">一对一</h2>

<h3 id="toc_1">hasOne</h3>

<h3 id="toc_2">belongsTo</h3>

<blockquote>
<p>区别: <code>联系键</code> 添加的地方不一样</p>
</blockquote>

<pre><code class="language-js">var Player = this.sequelize.define(&#39;player&#39;, {/* attributes */}), 
    Coach  = this.sequelize.define(&#39;coach&#39;, {/* attributes */}), 
    Team  = this.sequelize.define(&#39;team&#39;, {/* attributes */}),
    Game =  this.sequelize.define(&#39;game&#39;, {/* attributes */});


Player.belongsTo(Team);     // 添加 teamId 到 Player
Coach.hasOne(Team);         //添加 coachId 到 Team
</code></pre>

<p>通过 hasOne 方法添加的模型</p>

<blockquote>
<p>对新添加模型的 setter 和 getter 会自动以模型名为后缀</p>

<p>此外，也会以  <code>模型名+id</code> 的形式生成外码</p>
</blockquote>

<p>可以通过以下代码修改</p>

<pre><code class="language-js">// Person#getPerson, Person#setPerson

Person.hasOne(Person);


// 增加方法Person#getFather,Person#setFather
// 修改外码为dadId

Person.hasOne(Person, {as: &#39;Father&#39;, foreignKey: &#39;dad_id&#39;})
</code></pre>

<h2 id="toc_3">一对多</h2>

<pre><code class="language-js">var User = sequelize.define(&#39;user&#39;, {/* ... */})
var Project = sequelize.define(&#39;project&#39;, {/* ... */})
 
// Project#getWorkers , Project#setWorkers

Project.hasMany(User, {as: &#39;Workers&#39;})
</code></pre>

<h2 id="toc_4">多对多</h2>

<blockquote>
<p>使用belongToMany,为两个多对多的模型建立联系</p>

<p>通过创建一个中间模型<code>(联系集)</code>实现</p>
</blockquote>

<pre><code class="language-js">User = sequelize.define(&#39;user&#39;, {})
Project = sequelize.define(&#39;project&#39;, {})
UserProjects = sequelize.define(&#39;userProjects&#39;, {
    id: {
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    status: DataTypes.STRING
})
 
User.belongsToMany(Project, {  as: &#39;Tasks&#39;, through: UserProjects, foreignKey: &#39;userId&#39; })
Project.belongsToMany(User, {  as: &#39;Workers&#39;,through: UserProjects ,foreignKey: &#39;projectId&#39;})


// 添加一个 project, 并且,设置其状态为 started

user.addProject(project, { status: &#39;started&#39; })


// 使用 through 可以选择特定属性

User.findAll({
  include: [{
    model: Project,
    through: {
      attributes: [&#39;createdAt&#39;, &#39;startedAt&#39;, &#39;finishedAt&#39;],
      where: {completed: true}
    }
  }]
});
</code></pre>

<blockquote>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(4) 范围]]></title>
    <link href="http://blog.kayorl.com/14872314142644.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142644.html</id>
    <content type="html"><![CDATA[
<p>范围（<code>scope</code>）: 定义好范围,在后续的操作中可以减少选择条件的重复，比如，只在<strong>未删除用户</strong>列表中进行操作。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">范围是对模型的一种分类</h2>

<pre><code class="language-js">// 修改默认所有操作的范围 default Scope
var Project = sequelize.define( &#39;project&#39;, {
    // Attributes
}, {
    defaultScope: {
        where: {
            active: true
        }
    },
    scopes: {
        deleted: {
            where: {
                deleted: true
            }
        },
        activeUsers: {
            include: [
                { model: User, where: { active: true } }
      ]
        }
    }
} );



// 移除默认范围，设置为 deleted 范围
Project.scope( &#39;deleted&#39; ).findAll();

// 与上面等价
var DeletedProjects = Project.scope( &#39;deleted&#39; );
DeletedProjects.findAll();

var Post = sequelize.define( &#39;post&#39;, attributes, {
    defaultScope: {
        where: {
            active: true
        }
    },
    scopes: {
        deleted: {
            where: {
                deleted: true
            }
        }
    }
} );
</code></pre>

<h2 id="toc_1">例子</h2>

<pre><code class="language-js">User.hasMany( Post ); // regular getPosts association
User.hasMany( Post.scope( &#39;deleted&#39; ), { as: &#39;deletedPosts&#39; } );
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] Sequelize(3)  CRUD]]></title>
    <link href="http://blog.kayorl.com/14872314142502.html"/>
    <updated>2017-02-16T15:50:14+08:00</updated>
    <id>http://blog.kayorl.com/14872314142502.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">模型定义</h2>

<pre><code class="language-js">var Task = sequelize.define( &#39;task&#39;, {
    title: Sequelize.STRING,
    rank: { type: Sequelize.STRING, defaultValue: 3 }
} );
</code></pre>

<h2 id="toc_1">Create</h2>

<pre><code class="language-js">// 创建数据库中对象
Task.create( { title: &#39;foo&#39; } );

// 创建临时变量
var task = Task.build( { title: &#39;very important task&#39; } );

// 将临时变量存入数据库内, 只保存 title 属性
task.save( { fields: [ &#39;title&#39; ] } );
</code></pre>

<h2 id="toc_2">Update</h2>

<pre><code class="language-js">// 在数据库中更新 task 的 title
task.update( { title: &#39;a very different title now&#39; } );


// 更新 排名小于1000或者无排名的 post 的 updateAt 为 null
Post.update( {
    updatedAt: null,
}, {
    where: {
        rank: {
            $or: {
                $lt: 100,
                $eq: null
            }
        }
    }
    //// rank &lt; 1000 OR rank IS NULL
} );
</code></pre>

<h2 id="toc_3">Delete</h2>

<pre><code class="language-js">// 删除 不活跃的 post
Post.destroy( {
    where: {
        status: &#39;inactive&#39;
    }
} );
</code></pre>

<h2 id="toc_4">Retrieve</h2>

<pre><code class="language-js">// 只选择相应属性
Model.findAll( {
    attributes: [ &#39;foo&#39;, &#39;bar&#39; ]
} );
// 做聚类
Model.findAll( {
    attributes: { include: [ [ sequelize.fn( &#39;COUNT&#39;, sequelize.col( &#39;hats&#39; ) ), &#39;no_hats&#39; ] ] }
} );
// 除开某些属性
Model.findAll( {
    attributes: { exclude: [ &#39;baz&#39; ] }
} );

// id 查找
Project.findById( 123 ).then();

// 属性查找
Project.findOne( { where: { title: &#39;aProject&#39; } } ).then();
// ？
Project.findOne( { where: { title: &#39;aProject&#39; }, attributes: [ &#39;id&#39;, [ &#39;name&#39;, &#39;title&#39; ] ] } ).then();

// 找，无则创建， created 为 boolean
User.findOrCreate( { where: { username: &#39;kayor&#39; } } ).spread( function ( user, created ) {} );

// 找并且计数 count 为计数， rows 为对象数组
Project.findAndCountAll( {
    where: { title: { $like: &#39;foo%&#39; } },
    offset: 10,
    limit: 2
} ).then( function ( result ) {
    console.log( result.count );
    console.log( result.rows );
} );

// 找出拥有 active profile 的用户
User.findAndCountAll( {
    include: [
        { model: Profile, where: { active: true } }
  ],
    limit: 3
} );


Project.findAll();
Project.all();
Project.findAll( { where: { name: &quot;a Project&quot; } } );
Project.findAll( { where: [ &quot;id&gt;?&quot;, 25 ] } );
Project.findAll( { where: { id: [ 1, 2, 3 ] } } );
Project.findAll( {
    where: {
        id: {
            $and: { a: 5 },
            $or: [ { a: 5 }, { a: 6 } ],
            $gt: 6,
            $gte: 6,
            $lt: 10,
            $lte: 10,
            $ne: 20,
            $between: [ 6, 10 ],
            $notBetween: [ 6, 10 ],
            $in: [ 1, 2 ],
            $notIn: [ 1, 2 ],
            $like: &#39;%hat&#39;
        },
        status: { $not: false }
    }
} );

//只找十个
Project.findAll( { limit: 10 } );
// 跳过前10个
Project.findAll( { offset: 10 } );
// 跳过前10，取两个
Project.findAll( { offset: 10, limit: 2 } );

// 递减
Project.findAll( { order: &#39;title DESC&#39; } );
// 分组
Project.findAll( { group: &#39;name&#39; } );
// 计数
Project.count( { where: [ &quot;id&gt;?&quot;, 25 ] } );
// 找最大
Project.max( &#39;age&#39; );

// 内连接找到拥有符合条件工具的用户
Post.findAll( {
    include: [ {
        model: Comment,
        as: &#39;comment_my&#39;,
        where: { name: { $like: &#39;%ooth%&#39; } }
    } ]
} );

// 获得原数据
Post.findOne( { where: { title: &#39;scut&#39; } } ).then( function ( post ) {
    post.title = &#39;south china university of tecknology&#39;;
    console.log( post.title ); // &#39;south china university of tecknology&#39;

    post.reload().then( function () {
        console.log( post.title ); // &#39;scut&#39;
    } );
} );

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[supertest 模拟客户端]]></title>
    <link href="http://blog.kayorl.com/14872476184764.html"/>
    <updated>2017-02-16T20:20:18+08:00</updated>
    <id>http://blog.kayorl.com/14872476184764.html</id>
    <content type="html"><![CDATA[
<p>模拟一个客户端，可用于爬虫、API 测试等</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">安装</h2>

<pre><code>$ npm install supertest --save-dev
</code></pre>

<h2 id="toc_1">例子</h2>

<pre><code class="language-js">var request = require(&#39;supertest&#39;);
var express = require(&#39;express&#39;);

var app = express();

app.get(&#39;/user&#39;, function(req, res) {
  res.status(200).json({ name: &#39;tobi&#39; });
});

request(app)
  .get(&#39;/user&#39;)
  .expect(&#39;Content-Type&#39;, /json/)
  .expect(&#39;Content-Length&#39;, &#39;15&#39;)
  .expect(200)
  .end(function(err, res) {
    if (err) throw err;
  });
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pm2]]></title>
    <link href="http://blog.kayorl.com/14872295003201.html"/>
    <updated>2017-02-16T15:18:20+08:00</updated>
    <id>http://blog.kayorl.com/14872295003201.html</id>
    <content type="html"><![CDATA[
<p>nodejs 的进程管理器，自带<code>负载均衡</code>以及热重载</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">全局安装</h2>

<pre><code>$ npm install pm2 -g
</code></pre>

<h2 id="toc_1">开机启动</h2>

<p>pm2 save 保存当前进程列表，下次启动时自动恢复列表内进程</p>

<pre><code>$ pm2 startup &amp;&amp; pm2 save
</code></pre>

<h2 id="toc_2">启动</h2>

<blockquote>
<p>[ app_name ] : 应用名<br/>
[ 4 ] :进程数目,为0时进程数目与 CPU 数相等</p>
</blockquote>

<pre><code>$ pm2 start app.js --name=[app_name] -i 4
</code></pre>

<h2 id="toc_3">暂停 | 删除</h2>

<blockquote>
<p>[ id ] : 进程 id</p>
</blockquote>

<pre><code>$ pm2 stop [id]
$ pm2 delete [id]
</code></pre>

<p>进程数变为2</p>

<blockquote>
<p>[ app_name ] : 应用名</p>
</blockquote>

<pre><code>$ pm2 sacle [app_name] 2
</code></pre>

<h2 id="toc_4">监控</h2>

<pre><code>$ pm2 list
$ pm2 monit
$ pm2 show [app_name]
$ pm2 logs
$ pm2 logs [app_name]
</code></pre>

<hr/>

<p>此外，还可以通过 <a href="https://app.keymetrics.io">keymetrics</a>  实现网页监控，不过免费版只能支持一台机器的状态监控</p>

]]></content>
  </entry>
  
</feed>
